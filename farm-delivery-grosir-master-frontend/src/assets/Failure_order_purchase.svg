<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:ns1="https://launchpad.net/jessyink"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   sodipodi:docname="Failure_order_purchase.svg"
   id="svg5327"
   version="1.1"
   viewBox="0 0 500 500">
  <metadata
     id="metadata5333">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <defs
     id="defs5331">
    <clipPath
       id="freepik--clip-path-2--inject-16">
      <path
         id="path4017"
         style="fill:#ffffff;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 257.54,274.8 a 19.66,19.66 0 0 0 -2.77,0.24 c 0,0 -5.5,-0.25 -9,8.5 -3.5,8.75 -1,18.5 -5.5,25.5 -4.5,7 -8,7.75 -36.75,8 -28.75,0.25 -38.75,5.25 -50.25,-9.75 -11.5,-15 -7,-22.5 -16.5,-26 -4.69,-1.73 -7.73,-1.14 -10,0.59 -3,3.49 -5.39,6.76 -4.53,11.91 1.5,9 10.25,23.75 28.25,35.25 18,11.5 39.25,15.75 63,13.25 23.75,-2.5 33.5,-12.75 41.75,-24.75 8.25,-12 9.25,-26.25 8,-33.75 a 12.53,12.53 0 0 0 -5.7,-8.99 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-3--inject-16">
      <path
         id="path4020"
         style="fill:#2bb648;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 211.33,188 c 0,0 9.9,4.86 14.76,6.16 4.86,1.3 16.06,1.31 16.62,5.42 0.56,4.11 -1.68,26.52 -3,33.8 -1.32,7.28 -1.49,18.12 -0.75,20.92 0.74,2.8 3,7.28 0.38,11.77 -2.62,4.49 -4.11,10.27 -10.09,9.33 -5.98,-0.94 -7.47,-5.23 -7.47,-5.23 l -36.41,4.49 c 0,0 -2.81,-14.76 -6,-27.83 -3.19,-13.07 -9.71,-31.75 -9.15,-40.71 0.56,-8.96 12.14,-14.57 20.17,-17.18 8.03,-2.61 20.94,-0.94 20.94,-0.94 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-4--inject-16">
      <path
         id="path4023"
         style="fill:#2bb648;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 182.39,234.14 c 0,0 1.12,13.26 2.24,19.24 a 81.68,81.68 0 0 1 1.31,10.45 c 0,0 4.48,-0.93 5.41,2.62 a 11.21,11.21 0 0 1 -3.92,11.39 c -3.74,2.8 -8.78,4.67 -12.51,3.55 -3.73,-1.12 -5,-10.46 -5,-16.25 0,-5.79 0,-13.26 -1.68,-17.55 -1.68,-4.29 3.13,-18.31 14.15,-13.45 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-5--inject-16">
      <path
         id="path4026"
         style="fill:#ffffff;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 197,202.77 c 0,0 6,17.74 8.6,17.18 2.6,-0.56 3.92,-19.61 3.92,-19.61 A 16.06,16.06 0 0 1 197,202.77 Z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-6--inject-16">
      <path
         id="path4029"
         style="fill:#ffffff;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 181.64,185.77 c 0,0 6.66,12 11.77,16.06 4.76,3.79 12.14,5.42 15.68,1.12 3.54,-4.3 4.49,-14 4.3,-20.17 -0.19,-6.17 -4.67,-10.27 -9.71,-15.31 -5.04,-5.04 -12.7,-11.58 -17.74,-8.22 -5.04,3.36 -5.94,22.6 -4.3,26.52 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-7--inject-16">
      <path
         id="path4032"
         style="fill:#ffffff;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 220.13,280.28 a 12.43,12.43 0 0 1 -2.1,1 c -1.79,0.65 -5.52,2.67 -7,8.47 -2,7.75 8,28.75 9.25,38 a 105.21,105.21 0 0 0 2.25,12.75 c 0,0 3.75,1 10,2 6.25,1 8.5,-2.25 8.5,-2.25 0,0 2.75,-23 -1.25,-37 -4,-14 -4.75,-20.5 -10,-22.5 -3.69,-1.36 -7.99,-1.44 -9.65,-0.47 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-8--inject-16">
      <path
         id="path4035"
         style="fill:#2bb648;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 219.27,337.54 c 0,0 17.25,4.25 28,0 0,0 -6.25,29 -10.75,41.75 -4.5,12.75 -4.25,18.75 -5,25.75 -0.75,7 -5,19.25 -10.5,21.25 -5.5,2 -6,-7.5 -2.25,-16.75 3.75,-9.25 5.25,-20.5 3.75,-34 -1.5,-13.5 -3.25,-38 -3.25,-38 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-9--inject-16">
      <path
         id="path4038"
         style="fill:#ffffff;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 207,282 c 0,0 -9,-3.75 -15.5,2.25 -6.5,6 -4.5,19 -4,21.5 0.5,2.5 1,5.25 1,5.25 l 1.25,31.75 17.5,0.25 c 0,0 3.25,-25.25 5.75,-36.25 2.5,-11 2.52,-19.46 -6,-24.75 z"
         inkscape:connector-curvature="0" />
    </clipPath>
    <clipPath
       id="freepik--clip-path-10--inject-16">
      <path
         id="path4041"
         style="fill:#2bb648;stroke:#263238;stroke-linecap:round;stroke-linejoin:round"
         d="m 185.52,337.79 c 0,0 3.25,24 6.5,35 3.25,11 6.5,24 6.5,37 0,13 10.5,18.5 13.25,16 2.75,-2.5 0.5,-15 -1.75,-21.5 -2.25,-6.5 -5.25,-22.75 -4.25,-31.25 1,-8.5 6.23,-34.04 6.23,-34.04 0,0 -17.48,1 -26.48,-1.21 z"
         inkscape:connector-curvature="0" />
    </clipPath>
  </defs>
  <sodipodi:namedview
     inkscape:document-rotation="0"
     showguides="false"
     inkscape:current-layer="freepik--Device--inject-2"
     inkscape:window-maximized="1"
     inkscape:window-y="-8"
     inkscape:window-x="-8"
     inkscape:cy="190.36165"
     inkscape:cx="368.43001"
     inkscape:zoom="1.4142136"
     showgrid="false"
     id="namedview5329"
     inkscape:window-height="706"
     inkscape:window-width="1366"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0"
     guidetolerance="10"
     gridtolerance="10"
     objecttolerance="10"
     borderopacity="1"
     bordercolor="#666666"
     pagecolor="#ffffff" />
  <g
     transform="translate(8.9332946,0.99258829)"
     id="freepik--background-complete--inject-2">
    <path
       inkscape:connector-curvature="0"
       id="path4825"
       style="fill:#ebebeb"
       d="m 106.12,275.13 c 0,0 -9.08,2.4 -1.44,22 7.64,19.6 13.3,29.5 13.3,29.5 0,0 1.25,4.5 -2.46,4.8 -3.71,0.3 -11.61,-1.78 -13.68,2.52 -2.07,4.3 0.77,9.15 7.2,13.66 6.43,4.51 20.14,14.92 21.38,15.86 1.24,0.94 2.31,3.08 -0.19,3.69 -2.5,0.61 -20.73,0.68 -20.18,9.33 0.55,8.65 20.52,18.28 22.68,19.38 2.16,1.1 2.6,2.1 2.3,3.31 -0.3,1.21 -6.44,0.67 -11.63,0.9 -5.19,0.23 -11.16,1.41 -10.42,6.37 0.74,4.96 12,16.38 41.5,22.29 l 13.86,1.85 8.75,-11 c 17.28,-24.65 17.56,-40.67 14.67,-44.77 -2.89,-4.1 -8,-0.84 -11.95,2.57 -3.95,3.41 -8,8 -9,7.38 -1,-0.62 -1.44,-1.71 -0.63,-4 0.81,-2.29 8.63,-23 3.06,-29.67 -5.57,-6.67 -18.82,5.89 -21.05,7.16 -2.23,1.27 -2.92,-1 -2.68,-2.54 0.24,-1.54 3,-18.53 4.54,-26.23 1.54,-7.7 0.41,-13.11 -4.22,-14.86 -4.46,-1.68 -8.74,5.28 -11.64,7.62 -2.9,2.34 -5.09,-1.78 -5.09,-1.78 0,0 -2.73,-11.07 -10.72,-30.53 -7.99,-19.46 -16.41,-14.78 -16.41,-14.78" />
    <path
       inkscape:connector-curvature="0"
       id="path4827"
       style="fill:#e0e0e0"
       d="M 168.73,433.93 C 162.92,419.62 153,394 144.39,372.05 c -8.61,-21.95 -16.43,-41.8 -22.17,-56.14 -2.88,-7.15 -5.2,-13 -6.82,-17 l -1.85,-4.62 -0.47,-1.2 a 4,4 0 0 1 -0.15,-0.42 c 0,0 0.07,0.13 0.19,0.4 0.12,0.27 0.29,0.68 0.51,1.19 l 1.93,4.59 c 1.66,4 4,9.77 6.94,16.93 5.81,14.31 13.68,34.15 22.3,56.1 8.62,21.95 18.47,47.58 24.22,61.92" />
    <path
       inkscape:connector-curvature="0"
       id="path4829"
       style="fill:#e0e0e0"
       d="m 112.77,337.31 a 4.58,4.58 0 0 1 0.94,0.37 c 0.6,0.26 1.45,0.66 2.49,1.16 2.09,1 4.94,2.49 8.06,4.18 l 8,4.34 2.42,1.29 a 4.65,4.65 0 0 1 0.87,0.52 6.13,6.13 0 0 1 -0.95,-0.36 c -0.59,-0.26 -1.44,-0.67 -2.48,-1.18 -2.08,-1 -4.91,-2.55 -8,-4.23 l -8,-4.28 -2.42,-1.29 a 3.89,3.89 0 0 1 -0.93,-0.52 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4831"
       style="fill:#e0e0e0"
       d="m 136.55,348.37 c -0.11,-0.05 2.67,-6.06 6.21,-13.42 3.54,-7.36 6.49,-13.29 6.6,-13.24 0.11,0.05 -2.67,6.07 -6.21,13.43 -3.54,7.36 -6.49,13.29 -6.6,13.23 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4833"
       style="fill:#e0e0e0"
       d="m 148.26,382.67 a 5,5 0 0 1 0.65,-0.8 l 1.88,-2.09 c 1.58,-1.76 3.75,-4.21 6,-7 2.25,-2.79 4.3,-5.37 5.73,-7.26 0.68,-0.88 1.24,-1.63 1.7,-2.23 a 4.45,4.45 0 0 1 0.66,-0.79 4.24,4.24 0 0 1 -0.52,0.89 c -0.37,0.55 -0.9,1.35 -1.59,2.32 -1.37,1.93 -3.33,4.56 -5.64,7.35 -2.31,2.79 -4.52,5.22 -6.16,6.93 -0.82,0.85 -1.49,1.54 -2,2 a 4.63,4.63 0 0 1 -0.71,0.68 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4835"
       style="fill:#e0e0e0"
       d="m 124.55,377.4 a 3.92,3.92 0 0 1 1,0.11 l 2.55,0.46 c 2.15,0.41 5.12,1 8.39,1.69 3.27,0.69 6.22,1.33 8.36,1.81 l 2.52,0.6 a 4,4 0 0 1 0.92,0.28 3.89,3.89 0 0 1 -1,-0.11 l -2.55,-0.47 c -2.16,-0.41 -5.12,-1 -8.39,-1.68 -3.27,-0.68 -6.23,-1.33 -8.36,-1.82 l -2.53,-0.59 a 3.79,3.79 0 0 1 -0.91,-0.28 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4837"
       style="fill:#e0e0e0"
       d="m 131,409 a 6.67,6.67 0 0 1 1.22,0.16 l 3.27,0.58 c 2.76,0.51 6.57,1.24 10.76,2.07 4.19,0.83 8,1.62 10.75,2.21 l 3.24,0.71 a 6.43,6.43 0 0 1 1.18,0.32 6,6 0 0 1 -1.21,-0.15 l -3.27,-0.58 c -2.76,-0.51 -6.57,-1.24 -10.77,-2.08 -4.2,-0.84 -8,-1.62 -10.74,-2.2 l -3.25,-0.72 A 7.15,7.15 0 0 1 131,409 Z" />
    <path
       inkscape:connector-curvature="0"
       id="path4839"
       style="fill:#e0e0e0"
       d="m 160.78,414.69 a 7.06,7.06 0 0 1 0.79,-1 l 2.28,-2.73 c 1.93,-2.31 4.57,-5.51 7.39,-9.13 2.82,-3.62 5.29,-6.94 7.06,-9.37 l 2.1,-2.88 a 8.16,8.16 0 0 1 0.81,-1 6.57,6.57 0 0 1 -0.67,1.12 c -0.46,0.71 -1.13,1.72 -2,3 -1.71,2.47 -4.14,5.84 -7,9.46 -2.86,3.62 -5.51,6.79 -7.49,9.06 -1,1.12 -1.81,2 -2.39,2.64 a 7.68,7.68 0 0 1 -0.88,0.83 z" />
    <rect
       id="rect4841"
       style="fill:#ebebeb"
       transform="rotate(-31.14,386.38367,379.12148)"
       rx="7.54"
       height="149.35001"
       width="97.120003"
       y="304.44"
       x="337.82999" />
    <path
       inkscape:connector-curvature="0"
       id="path4843"
       style="fill:#ffffff"
       d="m 435.85,410.77 a 10.31,10.31 0 1 1 3.49,-14.15 10.3,10.3 0 0 1 -3.49,14.15 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4845"
       style="fill:#ffffff"
       d="m 437,423.39 a 10.46,10.46 0 0 1 -2.6,-0.32 10.72,10.72 0 1 1 2.6,0.32 z m 0,-20.62 A 9.81,9.81 0 0 0 428.62,417.65 9.83,9.83 0 0 0 442,421 v 0 a 9.81,9.81 0 0 0 -2.73,-17.92 9.47,9.47 0 0 0 -2.34,-0.31 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4847"
       style="fill:#ffffff"
       d="m 343,333.62 -7.1,4.28 -0.44,-0.72 6.45,-3.9 -1,-1.67 0.65,-0.39 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4849"
       style="fill:#ffffff"
       d="m 341,344.81 -0.65,0.39 -3,-5 0.51,-0.32 4.67,1.21 a 2.73,2.73 0 0 0 2.33,-0.11 c 0.82,-0.5 1,-1.38 0.33,-2.46 a 2.85,2.85 0 0 0 -2,-1.46 l 0.13,-0.79 a 3.73,3.73 0 0 1 2.53,1.9 c 0.87,1.44 0.69,2.8 -0.49,3.51 a 3.42,3.42 0 0 1 -2.93,0.18 l -3.83,-1 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4851"
       style="fill:#ffffff"
       d="m 346.73,351.55 -0.86,-1.42 -1.87,1.12 -0.44,-0.73 1.86,-1.12 -2.42,-4 0.53,-0.32 7,0.92 0.49,0.81 -6.77,-0.86 1.86,3.08 1.64,-1 0.43,0.71 -1.64,1 0.86,1.42 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4853"
       style="fill:#ffffff"
       d="m 353.3,362.42 -0.86,-1.42 -1.86,1.13 -0.44,-0.73 1.86,-1.13 -2.42,-4 0.53,-0.32 7,0.92 0.49,0.81 -6.77,-0.86 1.86,3.08 1.65,-1 0.42,0.71 -1.64,1 0.88,1.39 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4855"
       style="fill:#ffffff"
       d="m 357.27,368.49 c -1.2,0.73 -2.66,0.45 -3.7,-1.28 a 4.3,4.3 0 0 1 -0.63,-3.09 h 0.79 a 3.61,3.61 0 0 0 0.5,2.68 c 0.73,1.2 1.7,1.49 2.56,1 0.86,-0.49 1.14,-1.46 0,-3.27 l -0.91,-1.51 3.78,-1.78 2.34,3.88 -0.65,0.39 -2,-3.24 -2.4,1.12 0.55,0.91 c 1.38,2.11 1.03,3.43 -0.23,4.19 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4857"
       style="fill:#ffffff"
       d="m 361.54,375.48 a 2.58,2.58 0 0 1 -3.64,-1.1 c -1.14,-1.89 -0.45,-3.7 1.79,-5.06 2.41,-1.45 4.46,-0.89 5.62,1 a 3.84,3.84 0 0 1 0.64,1.92 l -0.77,0.06 a 2.9,2.9 0 0 0 -0.5,-1.58 c -0.92,-1.53 -2.5,-1.92 -4.42,-0.76 a 6.21,6.21 0 0 0 -0.56,0.38 2.63,2.63 0 0 1 2.52,1.44 2.5,2.5 0 0 1 -0.68,3.7 z m -0.46,-0.7 a 1.82,1.82 0 0 0 0.46,-2.71 1.82,1.82 0 1 0 -3,1.9 1.81,1.81 0 0 0 2.54,0.81 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4859"
       style="fill:#ffffff"
       d="m 367.32,385.24 c -1.18,0.72 -2.61,0.41 -3.65,-1.31 a 4.27,4.27 0 0 1 -0.63,-3.1 h 0.79 a 3.63,3.63 0 0 0 0.51,2.7 c 0.71,1.18 1.65,1.49 2.53,1 0.88,-0.49 1.05,-1.45 0.25,-2.77 l -0.3,-0.5 0.53,-0.33 3.65,0.48 -2.19,-3.63 0.65,-0.39 2.76,4.56 -0.52,0.31 -3.74,-0.48 c 0.84,1.53 0.5,2.78 -0.64,3.46 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4861"
       style="fill:#ffffff"
       d="m 371.7,392.31 a 2.58,2.58 0 0 1 -3.64,-1.11 c -1.14,-1.88 -0.45,-3.7 1.79,-5.05 2.41,-1.46 4.47,-0.9 5.63,1 a 3.86,3.86 0 0 1 0.63,1.91 l -0.76,0.06 a 3,3 0 0 0 -0.5,-1.58 c -0.93,-1.53 -2.5,-1.92 -4.43,-0.75 -0.16,0.09 -0.36,0.23 -0.56,0.37 a 2.68,2.68 0 0 1 2.53,1.44 2.51,2.51 0 0 1 -0.69,3.71 z m -0.45,-0.71 a 1.82,1.82 0 0 0 0.45,-2.71 1.83,1.83 0 1 0 -3,1.91 1.82,1.82 0 0 0 2.55,0.8 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4863"
       style="fill:#ffffff"
       d="m 380.62,395.83 -0.51,0.31 -8.38,1 -0.47,-0.79 8.21,-1 -2.21,-3.65 -1.32,0.8 -0.44,-0.72 2,-1.19 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4865"
       style="fill:#ffffff"
       d="m 386.75,406 -0.51,0.31 -8.38,1 -0.47,-0.79 8.21,-1 -2.21,-3.65 -1.33,0.81 -0.43,-0.72 2,-1.2 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4867"
       style="fill:#ffffff"
       d="m 385.85,416.05 c -1.25,0.76 -2.68,0.16 -3.7,-1.53 -1.02,-1.69 -0.87,-3.21 0.38,-4 a 2.08,2.08 0 0 1 2.58,0.32 1.86,1.86 0 0 1 0.88,-2.06 c 1.16,-0.7 2.47,-0.15 3.38,1.35 0.91,1.5 0.79,2.94 -0.36,3.64 a 1.9,1.9 0 0 1 -2.25,-0.19 2.1,2.1 0 0 1 -0.91,2.47 z m -0.44,-0.76 c 0.87,-0.53 1,-1.61 0.21,-2.86 -0.79,-1.25 -1.76,-1.67 -2.63,-1.14 -0.87,0.53 -1,1.6 -0.22,2.86 0.78,1.26 1.76,1.67 2.64,1.14 z m 0.78,-3.21 c 0.67,1.1 1.57,1.46 2.34,1 0.77,-0.46 0.86,-1.48 0.22,-2.55 -0.64,-1.07 -1.55,-1.45 -2.34,-1 -0.79,0.45 -0.88,1.47 -0.22,2.55 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4869"
       style="fill:#ffffff"
       d="m 391.65,422 c -2.41,1.46 -4.47,0.9 -5.63,-1 a 3.92,3.92 0 0 1 -0.63,-1.92 l 0.76,-0.06 a 3,3 0 0 0 0.5,1.58 c 0.93,1.53 2.5,1.92 4.43,0.76 0.16,-0.1 0.36,-0.23 0.56,-0.38 a 2.67,2.67 0 0 1 -2.53,-1.44 2.5,2.5 0 0 1 0.69,-3.67 2.57,2.57 0 0 1 3.64,1.1 c 1.14,1.82 0.45,3.63 -1.79,5.03 z m 0.8,-1.85 a 1.93,1.93 0 0 0 0.39,-2.8 1.81,1.81 0 1 0 -3,1.91 1.91,1.91 0 0 0 2.61,0.84 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4871"
       style="fill:#ffffff"
       d="m 399.48,427 -7.09,4.29 -0.44,-0.73 6.44,-3.9 -1,-1.67 0.65,-0.39 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4873"
       style="fill:#ffffff"
       d="m 397.45,438.23 -0.65,0.4 -3,-5 0.52,-0.31 4.67,1.2 a 2.74,2.74 0 0 0 2.33,-0.11 c 0.82,-0.49 1,-1.38 0.32,-2.46 a 2.81,2.81 0 0 0 -2,-1.46 l 0.13,-0.78 a 3.71,3.71 0 0 1 2.54,1.9 c 0.87,1.44 0.69,2.79 -0.5,3.51 a 3.4,3.4 0 0 1 -2.92,0.17 l -3.83,-1 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4875"
       style="fill:#ffffff"
       d="m 402.68,443.76 c -1.19,0.72 -2.62,0.41 -3.65,-1.31 a 4.27,4.27 0 0 1 -0.63,-3.1 h 0.79 a 3.63,3.63 0 0 0 0.51,2.7 c 0.71,1.17 1.65,1.49 2.53,1 0.88,-0.49 1,-1.45 0.25,-2.77 l -0.31,-0.51 0.54,-0.32 3.65,0.48 -2.19,-3.63 0.65,-0.39 2.75,4.56 -0.51,0.31 -3.74,-0.48 c 0.84,1.53 0.5,2.77 -0.64,3.46 z" />
    <rect
       id="rect4877"
       style="fill:#ffffff"
       transform="matrix(0.86,-0.52,0.52,0.86,-164.25,256.48)"
       height="66.410004"
       width="3.5999999"
       y="389.75"
       x="376.25" />
    <rect
       id="rect4879"
       style="fill:#ffffff"
       transform="rotate(-31.14,380.2919,440.54153)"
       height="34.060001"
       width="3.5999999"
       y="423.48001"
       x="378.45999" />
    <rect
       id="rect4881"
       style="fill:#e0e0e0"
       transform="rotate(58.86,362.60962,332.07731)"
       rx="4.96"
       height="20.82"
       width="27.860001"
       y="321.66"
       x="348.67999" />
    <path
       inkscape:connector-curvature="0"
       id="path4883"
       style="fill:#ebebeb"
       d="m 351.43,322.54 1.14,-0.69 7.43,12.28 a 3.0012331,3.0012331 0 1 0 5.14,-3.1 l -7.42,-12.28 1.14,-0.69 7.42,12.28 a 4.3337859,4.3337859 0 0 1 -7.42,4.48 z" />
    <rect
       id="rect4885"
       style="fill:#ebebeb"
       transform="matrix(0.86,-0.52,0.52,0.86,-122.82,238.33)"
       height="9.8500004"
       width="1.34"
       y="335.01001"
       x="366.34" />
    <rect
       id="rect4887"
       style="fill:#ffffff"
       transform="rotate(58.86,396.5737,341.00328)"
       height="6.1500001"
       width="71.660004"
       y="337.89999"
       x="360.73999" />
    <path
       inkscape:connector-curvature="0"
       id="path4889"
       style="fill:#f5f5f5"
       d="m 209.3,33.61 c -0.76,10.8 0,30.92 -3.93,41 -3.93,10.08 -9.18,20.48 -19,25 -12.12,5.56 -26.36,3.2 -39.29,6.46 -20.26,5.1 -34.92,23.69 -41.17,43.63 -6.25,19.94 -5.56,41.3 -4.81,62.18 l 103.4,14.34 c 0,0 0.54,-42 9.56,-53.49 9.02,-11.49 51.87,-21.8 66,-53.21 12.74,-28.27 16.58,-73.1 16.58,-73.1 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4905"
       style="fill:#e0e0e0"
       d="m 258.68,79.25 c 0,0.15 -9.45,-1 -21.05,-2.6 -11.6,-1.6 -21,-3 -21,-3.12 0,-0.12 9.44,1 21,2.6 11.56,1.6 21.06,2.98 21.05,3.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4907"
       style="fill:#e0e0e0"
       d="m 257.54,87.67 c 0,0.15 -9.44,-1 -21,-2.6 -11.56,-1.6 -21,-3 -21,-3.12 0,-0.12 9.44,1 21,2.6 11.56,1.6 21.02,2.98 21,3.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4909"
       style="fill:#e0e0e0"
       d="m 253.69,96.26 c 0,0.14 -9.44,-1 -21,-2.6 -11.56,-1.6 -21,-3 -21,-3.13 0,-0.13 9.43,1 21,2.61 11.57,1.61 21.02,2.98 21,3.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4911"
       style="fill:#e0e0e0"
       d="m 246.68,104.92 c 0,0.15 -9.44,-1 -21.05,-2.6 -11.61,-1.6 -21,-3 -21,-3.12 0,-0.12 9.44,1 21.05,2.6 11.61,1.6 21.02,2.98 21,3.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4913"
       style="fill:#e0e0e0"
       d="m 235.51,113.57 c 0,0.14 -9.44,-1 -21,-2.61 -11.56,-1.61 -21,-3 -21,-3.12 0,-0.12 9.44,1 21,2.61 11.56,1.61 21.02,2.97 21,3.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4915"
       style="fill:#e0e0e0"
       d="m 277.51,82.06 a 52.46,52.46 0 0 1 -10.26,-1.67 26.6,26.6 0 0 1 5.18,0.58 26.06,26.06 0 0 1 5.08,1.09 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4917"
       style="fill:#e0e0e0"
       d="M 277.15,89.57 A 26.6,26.6 0 0 1 272,89 a 26.06,26.06 0 0 1 -5.08,-1.09 24.85,24.85 0 0 1 5.17,0.58 26.51,26.51 0 0 1 5.06,1.08 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4919"
       style="fill:#e0e0e0"
       d="m 274.6,100 a 26.78,26.78 0 0 1 -5.18,-0.6 31.75,31.75 0 0 1 -5.08,-1.07 c 0,-0.18 2.34,0.09 5.17,0.55 a 26,26 0 0 1 5.09,1.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4921"
       style="fill:#e0e0e0"
       d="m 270.92,108.75 a 26.78,26.78 0 0 1 -5.18,-0.6 32.08,32.08 0 0 1 -5.08,-1.07 c 0,-0.18 2.34,0.09 5.17,0.55 a 25.79,25.79 0 0 1 5.09,1.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4923"
       style="fill:#e0e0e0"
       d="m 263,117.1 a 26.71,26.71 0 0 1 -5.18,-0.6 30.49,30.49 0 0 1 -5.08,-1.07 c 0,-0.18 2.34,0.09 5.16,0.56 a 26.47,26.47 0 0 1 5.1,1.11 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4925"
       style="fill:#e0e0e0"
       d="m 226,124.13 c 0,0.14 -14.16,-1.74 -31.58,-4.21 -17.42,-2.47 -31.54,-4.58 -31.52,-4.72 0.02,-0.14 14.16,1.74 31.59,4.21 17.43,2.47 31.51,4.59 31.51,4.72 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4927"
       style="fill:#e0e0e0"
       d="m 218.66,133 a 6.07,6.07 0 0 1 -0.7,-0.06 l -2,-0.26 -7.3,-1.07 -24.06,-3.7 c -9.39,-1.48 -17.88,-2.86 -24,-3.89 l -7.27,-1.25 c -0.86,-0.16 -1.52,-0.28 -2,-0.38 a 3.09,3.09 0 0 1 -0.68,-0.18 4.46,4.46 0 0 1 0.7,0.08 l 2,0.28 7.3,1.09 24.06,3.73 24,3.86 7.27,1.23 2,0.36 a 2.8,2.8 0 0 1 0.68,0.16 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4929"
       style="fill:#e0e0e0"
       d="m 205.46,141.06 a 11.74,11.74 0 0 1 -2.6,-0.23 c -1.69,-0.22 -4.14,-0.56 -7.17,-1 -6.05,-0.87 -14.4,-2.14 -23.61,-3.58 -9.21,-1.44 -17.56,-2.79 -23.59,-3.79 l -7.14,-1.2 -1.93,-0.36 a 3.05,3.05 0 0 1 -0.67,-0.16 2.89,2.89 0 0 1 0.68,0.06 l 1.95,0.25 7.17,1 23.61,3.63 23.59,3.74 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4931"
       style="fill:#e0e0e0"
       d="m 249.79,129 a 26.78,26.78 0 0 1 -5.18,-0.6 32.08,32.08 0 0 1 -5.08,-1.07 c 0,-0.18 2.34,0.09 5.17,0.55 a 25.57,25.57 0 0 1 5.09,1.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4933"
       style="fill:#e0e0e0"
       d="m 239.6,134.66 a 26.78,26.78 0 0 1 -5.18,-0.6 32.08,32.08 0 0 1 -5.08,-1.07 c 0,-0.18 2.34,0.09 5.17,0.55 a 25.57,25.57 0 0 1 5.09,1.12 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4935"
       style="fill:#e0e0e0"
       d="m 225.88,144.21 a 26.78,26.78 0 0 1 -5.18,-0.6 30.79,30.79 0 0 1 -5.08,-1.07 c 0,-0.18 2.34,0.09 5.17,0.56 a 26,26 0 0 1 5.09,1.11 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4937"
       style="fill:#e0e0e0"
       d="m 199.66,159.29 c 0,0.15 -17.51,-2.43 -39,-5.74 -21.49,-3.31 -39,-6.12 -39,-6.26 0,-0.14 17.5,2.43 39,5.75 21.5,3.32 39.02,6.11 39,6.25 z" />
    <path
       inkscape:connector-curvature="0"
       id="path4939"
       style="fill:#e0e0e0"
       d="m 189.19,178.22 c 0,0.14 -5.76,-0.67 -12.8,-1.81 -7.04,-1.14 -12.74,-2.18 -12.72,-2.32 0.02,-0.14 5.76,0.67 12.8,1.81 7.04,1.14 12.74,2.17 12.72,2.32 z" />
  </g>
  <g
     transform="matrix(1.1154263,0,0,1,-32.059298,0.99258829)"
     id="freepik--Floor--inject-2">
    <path
       inkscape:connector-curvature="0"
       id="path4942"
       style="fill:#263238"
       d="m 465.41,463.75 c 0,0.15 -96.45,0.26 -215.4,0.26 -118.95,0 -215.42,-0.11 -215.42,-0.26 0,-0.15 96.43,-0.26 215.42,-0.26 118.99,0 215.4,0.12 215.4,0.26 z" />
  </g>
  <g
     transform="translate(8.9332946,0.99258829)"
     id="freepik--Icons--inject-2">
    <rect
       id="rect5100"
       style="fill:#aa0000"
       transform="rotate(-8.04,378.62837,166.17284)"
       rx="6.79"
       height="108.71"
       width="114.62"
       y="111.84"
       x="321.5" />
    <path
       inkscape:connector-curvature="0"
       id="path5102"
       style="fill:#ebebeb"
       d="m 400.11,179.71 a 4.46,4.46 0 0 1 -0.76,0.16 l -2.19,0.36 -8.16,1.25 -27.29,4 h -0.22 l -0.06,-0.22 c -0.41,-1.42 -0.85,-2.91 -1.29,-4.43 -3.71,-13 -7,-24.57 -9.19,-32.14 l 0.18,0.11 -7.28,1 -1.94,0.24 a 4.35,4.35 0 0 1 -0.68,0 3.83,3.83 0 0 1 0.66,-0.14 l 1.93,-0.32 7.26,-1.12 h 0.14 v 0.13 l 9.38,32.09 1.28,4.44 -0.28,-0.19 27.4,-3.8 8.14,-1.09 2.21,-0.27 a 4.84,4.84 0 0 1 0.76,-0.06 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5104"
       style="fill:#ebebeb"
       d="m 359.46,177.43 h 0.19 l 0.56,-0.11 2.19,-0.35 8.21,-1.26 28.32,-4.16 -0.22,0.24 c 0.16,-4.89 0.33,-10.18 0.5,-15.65 0.09,-2.81 0.18,-5.58 0.27,-8.22 l 0.29,0.27 -33.41,4.71 -9.89,1.34 -2.67,0.34 -0.7,0.08 h -0.24 a 0.81,0.81 0 0 1 0.24,-0.06 l 0.68,-0.12 2.66,-0.43 9.88,-1.5 33.38,-4.88 h 0.3 v 0.31 c -0.08,2.64 -0.17,5.4 -0.26,8.22 -0.18,5.47 -0.36,10.76 -0.52,15.65 V 172 h -0.21 l -28.35,4 -8.22,1.11 -2.2,0.28 -0.57,0.06 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5106"
       style="fill:#ebebeb"
       d="m 372.81,194.27 c -0.05,0 -0.1,-0.34 -0.35,-0.88 a 3.86,3.86 0 0 0 -1.69,-1.79 3.67,3.67 0 0 0 -5.38,3.74 3.66,3.66 0 0 0 2.84,3 3.71,3.71 0 0 0 3.37,-1 3.81,3.81 0 0 0 1.12,-2.2 c 0.09,-0.59 0,-0.94 0.09,-0.94 a 2,2 0 0 1 0.12,1 3.88,3.88 0 0 1 -1.07,2.44 4.06,4.06 0 0 1 -3.73,1.18 4.1,4.1 0 0 1 -1.1,-7.66 4.07,4.07 0 0 1 3.91,0.08 3.88,3.88 0 0 1 1.71,2 2.08,2.08 0 0 1 0.16,1.03 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5108"
       style="fill:#ebebeb"
       d="m 397.52,190.72 c 0,0 -0.1,-0.34 -0.35,-0.88 a 3.83,3.83 0 0 0 -1.7,-1.79 3.65,3.65 0 1 0 0.84,5.81 3.81,3.81 0 0 0 1.12,-2.2 c 0.09,-0.59 0,-0.94 0.09,-0.94 a 2,2 0 0 1 0.11,1 3.82,3.82 0 0 1 -1.06,2.44 4.06,4.06 0 0 1 -3.73,1.18 4.1,4.1 0 0 1 -1.1,-7.66 4.07,4.07 0 0 1 3.91,0.08 3.88,3.88 0 0 1 1.71,2 2.08,2.08 0 0 1 0.16,0.96 z" />
    <circle
       id="circle5110"
       style="fill:#fafafa"
       transform="rotate(-56.52,397.0744,144.30291)"
       r="11.07"
       cy="144.31"
       cx="397.07999" />
    <rect
       id="rect5114"
       style="fill:#455a64"
       transform="rotate(14.15,381.01477,284.21535)"
       rx="6.79"
       height="88.07"
       width="92.860001"
       y="240.23"
       x="334.60999" />
    <text
       transform="scale(1.0065932,0.99344998)"
       id="text1414"
       y="150.87061"
       x="388.63684"
       style="font-style:normal;font-weight:normal;font-size:17.0735px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#aa0000;fill-opacity:1;stroke:none;stroke-width:0.426839"
       xml:space="preserve"><tspan
         style="fill:#aa0000;stroke-width:0.426839"
         y="150.87061"
         x="388.63684"
         id="tspan1412"
         sodipodi:role="line">X</tspan></text>
  </g>
  <g
     transform="translate(8.9332946,0.99258829)"
     id="freepik--Device--inject-2">
    <path
       inkscape:connector-curvature="0"
       id="path5139"
       style="fill:#263238"
       d="M 320.67,465.1 194.84,464.52 A 27.41,27.41 0 0 1 167.56,437 l 1.33,-315.46 a 27.42,27.42 0 0 1 27.54,-27.29 l 125.83,0.58 a 27.4,27.4 0 0 1 27.28,27.52 l -1.33,315.45 a 27.42,27.42 0 0 1 -27.54,27.3 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5141"
       style="fill:#fafafa"
       d="m 321,103.68 -24.4,-0.12 a 6.07,6.07 0 0 0 -5.95,6.17 v 4.42 a 6.06,6.06 0 0 1 -5.95,6.17 l -47.55,-0.22 a 6.07,6.07 0 0 1 -5.9,-6.22 v -4.43 a 6.07,6.07 0 0 0 -5.9,-6.22 h -8.58 l -21.35,-0.09 a 19.2,19.2 0 0 0 -19.29,19.11 l -1.3,307.91 A 19.2,19.2 0 0 0 194,449.4 l 125.58,0.58 a 19.19,19.19 0 0 0 19.28,-19.11 L 340.15,123 A 19.19,19.19 0 0 0 321,103.68 Z" />
    <path
       inkscape:connector-curvature="0"
       id="path5143"
       style="fill:#263238"
       d="m 192.44,136.41 a 0.52,0.52 0 0 1 -0.36,-0.16 l -1.91,-2 a 0.46,0.46 0 0 1 -0.14,-0.35 0.49,0.49 0 0 1 0.15,-0.35 l 1.92,-1.83 a 0.49,0.49 0 0 1 0.7,0 0.5,0.5 0 0 1 0,0.71 l -1.56,1.48 1.57,1.64 a 0.5,0.5 0 0 1 0,0.71 0.52,0.52 0 0 1 -0.37,0.15 z" />
    <circle
       id="circle5215"
       style="fill:#aa0000"
       r="26.18"
       cy="216.56"
       cx="260.01999" />
    <path
       inkscape:connector-curvature="0"
       id="path5235"
       style="fill:#e0e0e0"
       d="m 303.06,181.57 a 4.49,4.49 0 0 1 -1.6,0.15 4.44,4.44 0 0 1 -1.6,-0.15 8.08,8.08 0 0 1 3.2,0 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5237"
       style="fill:#e0e0e0"
       d="m 304.76,177.22 a 8.82,8.82 0 0 1 0,3.24 8.28,8.28 0 0 1 0,-3.24 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5239"
       style="fill:#e0e0e0"
       d="m 306.56,181.46 a 4.49,4.49 0 0 1 1.6,-0.15 4.44,4.44 0 0 1 1.6,0.15 8.08,8.08 0 0 1 -3.2,0 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5241"
       style="fill:#e0e0e0"
       d="m 304.87,185.82 a 8.33,8.33 0 0 1 0,-3.25 8.88,8.88 0 0 1 0,3.25 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5243"
       style="fill:#e0e0e0"
       d="m 307.45,184 c -0.06,0.05 -0.37,-0.21 -0.69,-0.58 -0.32,-0.37 -0.51,-0.73 -0.45,-0.78 0.06,-0.05 0.38,0.2 0.69,0.58 0.31,0.38 0.52,0.67 0.45,0.78 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5245"
       style="fill:#e0e0e0"
       d="m 307.3,179 c 0.06,0.07 -0.15,0.38 -0.48,0.71 -0.33,0.33 -0.64,0.55 -0.7,0.49 -0.06,-0.06 0.15,-0.38 0.48,-0.71 0.33,-0.33 0.64,-0.49 0.7,-0.49 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5247"
       style="fill:#e0e0e0"
       d="m 303.64,180.27 c -0.06,0.07 -0.36,-0.09 -0.67,-0.35 -0.31,-0.26 -0.51,-0.52 -0.46,-0.58 0.05,-0.06 0.35,0.09 0.66,0.34 0.31,0.25 0.52,0.53 0.47,0.59 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5249"
       style="fill:#e0e0e0"
       d="m 303.49,182.45 c 0.07,0.05 -0.12,0.36 -0.42,0.69 -0.3,0.33 -0.59,0.54 -0.65,0.48 -0.06,-0.06 0.12,-0.37 0.42,-0.69 0.3,-0.32 0.59,-0.54 0.65,-0.48 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5267"
       style="fill:#263238"
       d="m 326.62,131.05 a 49,49 0 0 1 -7.07,0.26 48.75,48.75 0 0 1 -7.06,-0.26 47.1,47.1 0 0 1 7.06,-0.26 47.29,47.29 0 0 1 7.07,0.26 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5269"
       style="fill:#263238"
       d="m 326.62,134 a 47.29,47.29 0 0 1 -7.07,0.26 47.1,47.1 0 0 1 -7.06,-0.26 48.75,48.75 0 0 1 7.06,-0.26 49,49 0 0 1 7.07,0.26 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5271"
       style="fill:#263238"
       d="m 326.62,136.93 a 47.29,47.29 0 0 1 -7.07,0.26 47.1,47.1 0 0 1 -7.06,-0.26 48.75,48.75 0 0 1 7.06,-0.26 49,49 0 0 1 7.07,0.26 z" />
    <rect
       id="rect5273"
       style="fill:#ebebeb"
       transform="rotate(-179.55,260.59501,358.03718)"
       height="41.57"
       width="32.93"
       y="337.26001"
       x="244.12" />
    <polygon
       id="polygon5275"
       style="fill:#fafafa"
       points="263.75,378.85 258.55,378.81 259.67,338.57 264.34,338.61 " />
    <polygon
       transform="translate(0.0338446,-1.3342516)"
       id="polygon5277"
       style="fill:#e0e0e0"
       points="277.2,338.71 244.24,343.04 243.96,378.7 225.07,378.55 225.38,338.3 244.27,338.45 " />
    <polygon
       id="polygon5279"
       style="fill:#fafafa"
       points="234.92,378.63 229.31,378.58 230.23,338.34 235.67,338.38 " />
    <path
       inkscape:connector-curvature="0"
       id="path5281"
       style="fill:#e0e0e0"
       d="m 250.62,326.13 c 0,0.26 -0.55,0.52 -1.56,0.77 a 25.9,25.9 0 0 1 -7.47,0.54 c -0.56,0 -1.14,-0.1 -1.75,-0.19 a 14.21,14.21 0 0 1 -1.92,-0.41 5.83,5.83 0 0 1 -1.19,-0.51 3.82,3.82 0 0 1 -1.25,-1.18 3.51,3.51 0 0 1 -0.54,-1.81 6,6 0 0 1 0.16,-1.4 24.33,24.33 0 0 1 1.26,-4.17 11.23,11.23 0 0 1 1.21,-2.12 9,9 0 0 1 0.81,-1 6.19,6.19 0 0 1 1.1,-0.89 4.44,4.44 0 0 1 1.49,-0.6 3.94,3.94 0 0 1 1.71,0.05 5.56,5.56 0 0 1 2.25,1.24 18.48,18.48 0 0 1 4.33,5.31 13,13 0 0 1 1.45,4.33 c 0.13,1.08 0,1.69 -0.24,1.74 -0.53,0.13 -1.3,-2 -3.4,-4.66 a 21.43,21.43 0 0 0 -4.23,-4 2.48,2.48 0 0 0 -1,-0.49 0.36,0.36 0 0 0 -0.18,0 1.32,1.32 0 0 0 -0.28,0.15 3.27,3.27 0 0 0 -0.42,0.37 c -0.15,0.17 -0.32,0.38 -0.47,0.59 a 8.16,8.16 0 0 0 -0.79,1.44 28,28 0 0 0 -1.13,3.53 2.5,2.5 0 0 0 -0.1,0.52 v 0 0 h -0.1 c -0.12,0 -0.15,0.06 -0.07,0 l 0.12,-0.09 a 0.36,0.36 0 0 0 0.09,0.09 2.5,2.5 0 0 0 0.47,0.24 13,13 0 0 0 1.47,0.44 c 0.51,0.14 1,0.25 1.51,0.35 1,0.2 1.93,0.34 2.8,0.46 1.75,0.23 3.21,0.39 4.22,0.58 1.01,0.19 1.63,0.53 1.64,0.78 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5283"
       style="fill:#ebebeb"
       d="m 249.94,326.43 c -0.09,-0.52 2.37,-1.29 6.21,-2.42 a 52.82,52.82 0 0 0 6.48,-2.32 6.57,6.57 0 0 0 1.41,-0.78 c 0.15,-0.13 0.22,-0.24 0.2,-0.23 -0.02,0.01 0,0.15 -0.05,0.08 a 4,4 0 0 0 -0.23,-0.58 l -0.48,-1 a 16,16 0 0 0 -1,-1.79 7.42,7.42 0 0 0 -1.17,-1.4 6.38,6.38 0 0 0 -0.66,-0.53 2.94,2.94 0 0 0 -0.6,-0.32 1.49,1.49 0 0 0 -1,-0.09 3.18,3.18 0 0 0 -1.16,0.67 25.28,25.28 0 0 0 -4.5,4.89 c -2.21,3.14 -2.79,5.59 -3.34,5.51 -0.24,0 -0.42,-0.7 -0.33,-1.91 a 13.74,13.74 0 0 1 1.42,-4.9 21.57,21.57 0 0 1 4.51,-6.14 6.49,6.49 0 0 1 2.34,-1.47 5,5 0 0 1 3.26,0 6.73,6.73 0 0 1 1.37,0.68 8.29,8.29 0 0 1 1.11,0.84 10.49,10.49 0 0 1 1.8,2.1 17.22,17.22 0 0 1 1.23,2.23 l 0.48,1.06 a 5.92,5.92 0 0 1 0.49,1.51 3.4,3.4 0 0 1 -0.37,2.18 4.08,4.08 0 0 1 -1.22,1.35 9.19,9.19 0 0 1 -2.25,1.12 33.94,33.94 0 0 1 -7.21,1.73 c -4.12,0.56 -6.68,0.41 -6.74,-0.07 z" />
    <rect
       id="rect5285"
       style="fill:#e0e0e0"
       transform="rotate(-179.55,243.65077,331.55831)"
       height="13.76"
       width="48.400002"
       y="324.69"
       x="219.44" />
    <rect
       id="rect5287"
       style="fill:#ebebeb"
       transform="rotate(-179.55,259.12148,331.67756)"
       height="13.76"
       width="43.75"
       y="324.81"
       x="237.24001" />
    <polygon
       id="polygon5289"
       style="fill:#fafafa"
       points="267.31,338.69 262.21,338.59 262.57,324.83 267.62,324.87 " />
    <polygon
       id="polygon5291"
       style="fill:#fafafa"
       points="230.87,338.36 225.26,338.31 225.56,324.54 231.37,324.66 " />
    <rect
       id="rect5293"
       style="fill:#ebebeb"
       transform="rotate(-179.55,289.06263,366.23051)"
       height="23.549999"
       width="18.66"
       y="354.45999"
       x="279.72" />
    <polygon
       id="polygon5295"
       style="fill:#fafafa"
       points="290.85,378.03 287.9,378.01 288.53,355.2 291.18,355.22 " />
    <polygon
       id="polygon5297"
       style="fill:#e0e0e0"
       points="279.81,355.13 298.47,355.28 279.79,357.74 279.63,377.94 268.93,377.86 269.1,355.05 " />
    <polygon
       id="polygon5299"
       style="fill:#fafafa"
       points="274.51,377.9 271.33,377.88 271.85,355.07 274.93,355.1 " />
    <path
       inkscape:connector-curvature="0"
       id="path5301"
       style="fill:#e0e0e0"
       d="m 283.4,348.15 c 0,0.35 -1.22,0.77 -3.36,1 a 12.2,12.2 0 0 1 -3.91,-0.32 2.64,2.64 0 0 1 -1.51,-1 2.28,2.28 0 0 1 -0.35,-1.15 3.91,3.91 0 0 1 0.09,-0.86 14.09,14.09 0 0 1 0.73,-2.41 7.13,7.13 0 0 1 0.71,-1.25 4.43,4.43 0 0 1 1.2,-1.16 2.62,2.62 0 0 1 2,-0.34 3.53,3.53 0 0 1 1.37,0.76 10.33,10.33 0 0 1 2.46,3.1 c 1,2 0.86,3.49 0.53,3.54 -0.33,0.05 -0.87,-1.09 -2.08,-2.54 a 12.62,12.62 0 0 0 -2.39,-2.21 1.22,1.22 0 0 0 -0.45,-0.23 v 0 0 l -0.07,0.05 a 2.17,2.17 0 0 0 -0.43,0.48 4,4 0 0 0 -0.42,0.77 15,15 0 0 0 -0.63,2 l -0.06,0.23 h -0.16 -0.15 c -0.07,0 -0.08,0 0,0 a 0.71,0.71 0 0 0 0.18,-0.16 l 0.06,-0.06 v 0 0 a 1,1 0 0 0 0.22,0.12 17.44,17.44 0 0 0 3.21,0.75 c 1.9,0.29 3.21,0.52 3.21,0.89 z" />
    <path
       inkscape:connector-curvature="0"
       id="path5303"
       style="fill:#e0e0e0"
       d="m 283,348.33 c -0.07,-0.4 1.32,-0.93 3.46,-1.64 a 35.18,35.18 0 0 0 3.6,-1.37 3.33,3.33 0 0 0 0.71,-0.41 c 0.06,-0.05 0.06,-0.09 0,0 a 0.6,0.6 0 0 0 -0.07,0.28 l -0.37,-0.78 a 9.58,9.58 0 0 0 -0.55,-1 3.37,3.37 0 0 0 -0.6,-0.72 2,2 0 0 0 -0.59,-0.42 0.48,0.48 0 0 0 -0.31,0 1.23,1.23 0 0 0 -0.54,0.3 15.21,15.21 0 0 0 -2.55,2.64 c -1.29,1.69 -1.71,3.05 -2.12,3 -0.41,-0.05 -0.66,-1.66 0.38,-4 a 12,12 0 0 1 2.56,-3.61 4.07,4.07 0 0 1 1.44,-0.92 3.15,3.15 0 0 1 2.08,0 3.8,3.8 0 0 1 0.86,0.41 5.82,5.82 0 0 1 0.68,0.52 6.34,6.34 0 0 1 1.08,1.25 12.49,12.49 0 0 1 0.72,1.31 l 0.27,0.61 a 3.74,3.74 0 0 1 0.31,1 2.28,2.28 0 0 1 -0.26,1.47 2.78,2.78 0 0 1 -0.79,0.88 5.44,5.44 0 0 1 -1.36,0.67 18.23,18.23 0 0 1 -4.17,0.92 c -2.34,0.16 -3.79,-0.02 -3.87,-0.39 z" />
    <rect
       id="rect5305"
       style="fill:#e0e0e0"
       transform="rotate(-179.55,279.45856,351.228)"
       height="7.8000002"
       width="27.43"
       y="347.32999"
       x="265.73999" />
    <rect
       id="rect5307"
       style="fill:#ebebeb"
       transform="rotate(-179.55,288.22896,351.29356)"
       height="7.8000002"
       width="24.790001"
       y="347.39999"
       x="275.82001" />
    <polygon
       id="polygon5309"
       style="fill:#fafafa"
       points="292.87,355.27 289.97,355.21 290.18,347.42 293.04,347.44 " />
    <polygon
       id="polygon5311"
       style="fill:#fafafa"
       points="272.22,355.08 269.04,355.06 269.21,347.25 272.5,347.32 " />
    <text
       id="text6616"
       y="269.22983"
       x="229.05182"
       style="font-style:normal;font-weight:normal;font-size:21.3333px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#aa0000;fill-opacity:1;stroke:none"
       xml:space="preserve"><tspan
         y="269.22983"
         x="229.05182"
         id="tspan6614"
         sodipodi:role="line">Maaf!</tspan></text>
    <text
       transform="scale(0.9070767,1.1024426)"
       id="text7425"
       y="261.763"
       x="285.15479"
       style="font-style:normal;font-weight:normal;font-size:13.3333px;line-height:13.3333px;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.907077"
       xml:space="preserve"><tspan
         id="tspan308"
         style="font-size:13.3333px;line-height:13.3333px;text-align:center;text-anchor:middle;stroke-width:0.907077"
         y="261.763"
         x="287.49854"
         sodipodi:role="line">Tidak dapat memproses </tspan><tspan
         id="tspan2526"
         style="font-size:13.3333px;line-height:13.3333px;text-align:center;text-anchor:middle;stroke-width:0.907077"
         y="275.09634"
         x="285.15479"
         sodipodi:role="line">pesanan Anda.</tspan></text>
    <g
       transform="matrix(0.90808846,0,0,0.96673395,-146.71258,-153.64738)"
       id="g9283">
      <g
         id="g9136"
         transform="matrix(0.76714139,0,0,-0.57022748,219.43051,633.73186)">
        <g
           transform="translate(462.93893,324.18882)"
           id="g7525">
          <path
             inkscape:connector-curvature="0"
             id="path7527"
             style="fill:#79a316;fill-opacity:1;fill-rule:nonzero;stroke:none"
             d="m 0,0 c -1.103,7.427 -2.207,14.853 -3.31,22.28 0.281,-3.331 -2.379,-6.396 -5.543,-7.473 -3.164,-1.076 -6.661,-0.535 -9.84,0.496 -0.384,0.124 -0.801,0.285 -0.988,0.643 -0.196,0.374 -0.071,0.829 0.071,1.227 1.163,3.257 3.226,6.187 5.899,8.381 -6.606,3.989 -11.992,9.97 -15.268,16.957 -1.018,2.172 -1.824,4.773 -0.712,6.898 1.041,1.989 3.541,2.883 5.766,2.595 2.226,-0.289 4.21,-1.541 5.956,-2.95 0.164,7.174 2.92,14.262 7.647,19.662 1.703,1.945 4.059,3.806 6.605,3.356 2.577,-0.454 4.148,-3.05 5.145,-5.47 C 4.1,60.111 5.1,52.94 4.305,45.966 c 2.055,2.212 5.105,4.366 7.861,3.134 3.25,-1.453 3.076,-6.171 1.73,-9.465 -1.43,-3.503 -3.583,-6.708 -6.284,-9.357 2.145,-0.34 4.369,-0.71 6.167,-1.928 1.799,-1.219 3.043,-3.546 2.319,-5.594 -0.447,-1.262 -1.53,-2.183 -2.634,-2.94 C 10.566,17.83 7.196,16.539 3.713,16.082 4.422,11.778 4.382,7.351 3.594,3.061 3.394,1.976 3.107,0.827 2.291,0.085 1.475,-0.656 -0.035,-0.715 -0.592,0.237" />
        </g>
        <g
           transform="translate(-3.1834788,-3.9325326)"
           id="g9103">
          <g
             id="g7773"
             transform="translate(463.84913,269.80263)">
            <path
               d="m 0,0 c 6.56,-0.394 12.836,0.912 18.71,3.857 0.599,0.3 0.073,1.196 -0.524,0.897 C 12.473,1.889 6.379,0.656 0,1.039 -0.669,1.079 -0.666,0.04 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7775"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7777"
             transform="translate(466.65453,265.47533)">
            <path
               d="M 0,0 C 1.116,-0.076 2.217,0.048 3.291,0.363 3.932,0.551 3.659,1.554 3.014,1.365 2.023,1.074 1.03,0.969 0,1.039 -0.669,1.085 -0.665,0.045 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7779"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7781"
             transform="translate(470.15513,261.61273)">
            <path
               d="m 0,0 c 6.021,-0.665 11.796,0.412 17.192,3.158 0.598,0.304 0.072,1.2 -0.524,0.897 C 11.43,1.39 5.838,0.394 0,1.039 -0.665,1.112 -0.658,0.073 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7783"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7785"
             transform="translate(472.78233,255.31483)">
            <path
               d="M 0,0 C 1.778,-0.1 3.485,0.348 4.987,1.303 5.551,1.661 5.03,2.561 4.463,2.2 3.101,1.334 1.611,0.948 0,1.039 -0.67,1.077 -0.666,0.038 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7787"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7789"
             transform="translate(474.00493,249.31603)">
            <path
               d="M 0,0 C 3.469,-0.167 6.771,0.534 9.886,2.064 10.487,2.36 9.96,3.256 9.361,2.961 6.41,1.512 3.283,0.881 0,1.039 -0.67,1.071 -0.667,0.032 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7791"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7793"
             transform="translate(486.28171,322.46516)">
            <path
               d="m 0,0 c -4.999,9.97 -19.258,10.761 -27.363,4.183 -5.477,-4.445 -6.282,-10.705 -6.29,-17.427 -0.012,-9.734 2.553,-19.406 5.093,-28.727 2.361,-8.663 4.91,-17.289 8.436,-25.56 2.416,-5.668 6.402,-12.653 13.269,-13.114 7.58,-0.508 8.314,11.47 9.149,16.448 1.779,10.614 1.859,21.505 1.485,32.232 -0.206,5.919 -0.681,11.821 -1.028,17.732 C 2.463,-9.323 2.029,-4.54 0,0 c -0.546,1.221 -2.336,0.164 -1.794,-1.049 2.028,-4.537 2.248,-9.451 2.535,-14.34 0.272,-4.622 0.624,-9.237 0.847,-13.862 0.493,-10.268 0.408,-20.568 -0.787,-30.787 -0.489,-4.18 -1.175,-8.478 -2.218,-12.561 -0.54,-2.12 -1.493,-4.167 -3.326,-5.458 -2.415,-1.699 -5.674,0.408 -7.474,1.979 -5.439,4.746 -7.642,13.176 -9.927,19.752 -2.985,8.59 -5.339,17.534 -7.303,26.41 -1.822,8.235 -4.147,19.508 -0.572,27.591 4.748,10.737 22.878,11.94 28.225,1.276 C -1.193,-2.247 0.599,-1.194 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7795"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7797"
             transform="translate(454.57383,314.33623)">
            <path
               d="M 0,0 C 5.887,-0.334 11.569,0.471 17.131,2.43 17.759,2.651 17.489,3.655 16.855,3.431 11.389,1.507 5.786,0.711 0,1.039 -0.67,1.077 -0.666,0.038 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7799"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7801"
             transform="translate(458.44413,304.70563)">
            <path
               d="M 0,0 C 10.497,-0.96 20.832,0.809 30.432,5.155 31.041,5.431 30.513,6.327 29.907,6.052 20.481,1.785 10.301,0.097 0,1.039 -0.667,1.1 -0.661,0.06 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7803"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7805"
             transform="translate(460.48493,299.30923)">
            <path
               d="M 0,0 2.981,0.497 C 3.641,0.607 3.36,1.609 2.705,1.499 L -0.276,1.002 C -0.936,0.892 -0.655,-0.109 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7807"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7809"
             transform="translate(457.37203,291.36883)">
            <path
               d="M 0,0 C 5.359,-0.605 10.554,0.1 15.56,2.111 16.173,2.358 15.906,3.363 15.283,3.113 10.369,1.138 5.265,0.445 0,1.039 -0.665,1.114 -0.658,0.074 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7811"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7813"
             transform="translate(465.95453,287.33503)">
            <path
               d="M 0,0 C 1.382,0.054 2.686,0.386 3.931,0.987 4.534,1.278 4.007,2.174 3.406,1.884 2.331,1.364 1.193,1.086 0,1.039 -0.668,1.013 -0.67,-0.026 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7815"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7817"
             transform="translate(464.90043,282.94933)">
            <path
               d="M 0,0 C 7.434,-0.543 14.593,1.028 21.128,4.609 21.716,4.93 21.192,5.828 20.604,5.506 14.219,2.008 7.258,0.509 0,1.039 -0.669,1.088 -0.664,0.049 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7819"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7821"
             transform="translate(482.06423,279.44803)">
            <path
               d="M 0,0 C 1.433,0.097 2.785,0.431 4.103,0.999 4.717,1.264 4.187,2.158 3.579,1.896 2.438,1.405 1.238,1.122 0,1.039 -0.665,0.994 -0.669,-0.045 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7823"
               inkscape:connector-curvature="0" />
          </g>
          <g
             id="g7825"
             transform="translate(466.85241,328.03335)">
            <path
               d="m 0,0 c -0.699,6.751 -1.399,13.502 -2.099,20.253 -0.071,0.692 -0.88,0.936 -1.29,0.349 -1.458,-2.084 -3.318,-3.348 -5.757,-4.076 -1.474,-0.44 -2.992,-0.294 -4.462,0.031 l -1.69,0.73 c -3.087,2.033 -2.862,4.18 0.674,6.443 0.704,0.023 0.926,0.913 0.35,1.291 -4.92,3.225 -9.415,8.194 -12.139,13.402 -1.511,2.887 -1.799,6.192 -0.892,9.298 1.245,4.261 6.46,6.196 10.064,3.701 0.558,-0.386 1.101,0.248 1.017,0.782 -1.338,8.535 1.959,22.902 12.351,23.993 11.426,1.2 10.422,-20.622 9.431,-27.39 -0.105,-0.715 0.882,-1.295 1.266,-0.534 1.578,3.128 5.045,3.893 8.041,2.381 2.813,-1.42 3.713,-4.934 3.619,-7.79 C 18.287,36.847 12.407,32.59 7.923,29.608 7.184,29.116 7.834,27.977 8.622,28.412 14.794,31.815 20.006,23.695 14.302,19.347 11.244,17.016 6.109,15.582 2.475,16.838 2.084,16.973 1.542,16.606 1.598,16.17 2.258,11.037 2.712,5.892 2.962,0.723 c 0.043,-0.89 1.429,-0.894 1.385,0 C 4.097,5.892 3.643,11.037 2.983,16.17 2.691,15.947 2.399,15.725 2.107,15.502 c 4.895,-1.692 15.342,1.111 16.06,7.276 0.689,5.919 -5.032,9.704 -10.244,6.83 0.233,-0.399 0.466,-0.798 0.699,-1.196 6.409,4.261 13.827,10.955 10.379,19.469 -2.304,5.687 -10.476,6.836 -13.373,1.091 0.422,-0.178 0.844,-0.355 1.266,-0.533 1.24,8.462 2.142,27.677 -9.74,29.138 -12.191,1.5 -16.05,-17.221 -14.713,-25.741 0.339,0.261 0.678,0.521 1.017,0.782 -6.465,4.475 -12.599,-2.191 -12.697,-8.608 -0.121,-7.974 8.124,-16.159 14.266,-20.186 0.116,0.431 0.233,0.861 0.349,1.291 -4.431,-0.145 -5.718,-5.945 -2.187,-8.447 4.929,-3.492 11.328,-1.468 14.618,3.235 -0.43,0.117 -0.86,0.233 -1.291,0.35 C -2.784,13.502 -2.085,6.751 -1.385,0 -1.294,-0.879 0.092,-0.888 0,0"
               style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
               id="path7827"
               inkscape:connector-curvature="0" />
          </g>
        </g>
      </g>
      <path
         style="fill:#ff6600;fill-opacity:1;stroke-width:0.35093296"
         d="m 592.09238,497.51572 c -3.50526,-1.05604 -6.48313,-4.64255 -9.59961,-11.56166 -2.28055,-5.06319 -5.61966,-13.81462 -5.61538,-14.71728 5.1e-4,-0.10856 1.54023,-0.2241 3.42159,-0.25676 2.91369,-0.0506 8.32754,-0.87024 8.78776,-1.33046 0.0785,-0.0785 0.0564,-0.28214 -0.0489,-0.45263 -0.10573,-0.17108 -1.57597,-0.0269 -3.28127,0.32169 -1.69933,0.34741 -4.46708,0.63432 -6.15055,0.63756 l -3.06086,0.006 -0.53205,-1.8424 c -0.85732,-2.96879 -1.24222,-5.4574 -1.24222,-8.03163 v -2.40863 l 2.71973,-0.003 c 4.13129,-0.004 10.61572,-1.12382 10.61572,-1.83322 0,-0.36515 -0.61363,-0.3132 -4.65691,0.39427 -2.32576,0.40694 -7.86407,0.61839 -8.17052,0.31194 -0.32824,-0.32824 1.08784,-2.81825 2.17957,-3.83252 2.41338,-2.24216 4.82851,-2.87903 10.99879,-2.90036 2.73126,-0.009 3.65852,0.13343 5.13003,0.79044 3.10456,1.38614 4.78175,3.72266 5.37752,7.49152 l 0.26819,1.69657 -1.80523,0.52479 c -4.10152,1.19235 -7.31673,1.62023 -13.62037,1.81259 -5.23698,0.15981 -6.57999,0.29885 -6.57999,0.68118 0,1.16626 12.94786,0.30578 19.10875,-1.26991 1.52081,-0.38896 2.80626,-0.66605 2.85655,-0.61576 0.0503,0.0503 0.28012,2.06398 0.51073,4.47487 0.47234,4.93801 0.58458,15.89396 0.18597,18.15273 -0.25953,1.47063 -0.28756,1.49462 -2.60112,2.22709 -1.54663,0.48966 -3.79648,0.81816 -6.6426,0.96989 -5.41404,0.28863 -5.79195,0.94588 -0.51462,0.89501 3.26373,-0.0314 5.75499,-0.42001 8.90331,-1.38862 0.52725,-0.16222 0.53491,0.0362 0.0913,2.36416 -1.40097,7.35258 -3.37644,9.794 -7.03331,8.69229 z m 3.6935,-3.35775 c 2.75119,-0.77211 1.85164,-1.35546 -1.03937,-0.67401 -1.23945,0.29215 -3.00366,0.53352 -3.92047,0.53637 -1.29902,0.004 -1.66693,0.1304 -1.66693,0.57247 0,0.4897 0.32397,0.53501 2.36879,0.33133 1.30284,-0.12978 3.21893,-0.47455 4.25798,-0.76616 z m -4.4117,-2.96437 c 0.77795,-0.21603 1.27358,-0.54563 1.1844,-0.78764 -0.0843,-0.2289 -0.37048,-0.36062 -0.63588,-0.29273 -0.26539,0.0679 -1.18003,0.22588 -2.03254,0.35109 -1.7692,0.25985 -2.41978,1.1058 -0.84803,1.10271 0.54687,-10e-4 1.59629,-0.16912 2.33205,-0.37343 z m -4.6716,-6.1578 c 0,-0.41709 -0.20911,-0.51129 -0.7896,-0.35573 -0.43428,0.11638 -1.14492,0.21376 -1.5792,0.2164 -0.43428,0.003 -0.7896,0.16271 -0.7896,0.35572 0,0.19302 0.71064,0.35094 1.5792,0.35094 1.22041,0 1.5792,-0.1289 1.5792,-0.56733 z m 3.00621,-2.26307 c 3.15608,-0.56664 6.81991,-1.71489 6.81991,-2.13736 0,-0.44369 -0.89409,-0.30673 -4.7376,0.72574 -1.5441,0.41479 -4.5051,0.85242 -6.57999,0.97251 -2.07489,0.12009 -3.77253,0.35214 -3.77253,0.51566 0,0.42241 5.78959,0.36883 8.27021,-0.0765 z m 7.85543,-5.27014 c 2.38959,-0.51248 2.35047,-1.19089 -0.0503,-0.87241 -2.0554,0.27265 -2.48924,0.45533 -2.19851,0.92574 0.24816,0.40153 0.11288,0.40474 2.2488,-0.0533 z m -6.41812,-2.25079 c 4.20092,-0.80213 7.83913,-1.96651 7.83913,-2.50885 0,-0.618 -0.1896,-0.60231 -2.28107,0.18874 -2.69549,1.0195 -7.00677,1.77804 -10.86017,1.91076 -2.23968,0.0772 -3.53923,0.26614 -3.62631,0.52739 -0.20008,0.60024 5.56586,0.52401 8.92842,-0.11804 z m -5.75952,-2.30071 c 1.92262,-0.53394 1.6727,-1.12907 -0.35094,-0.83567 -1.8701,0.27114 -2.19333,0.40006 -2.19333,0.87483 0,0.42981 0.90578,0.41587 2.54427,-0.0392 z m -3.59707,-7.17568 c 0,-0.57744 -0.40686,-0.63804 -2.06173,-0.30706 -1.62401,0.3248 -1.32952,0.83346 0.48254,0.83346 1.16977,0 1.57919,-0.13647 1.57919,-0.5264 z"
         id="path9248"
         inkscape:connector-curvature="0"
         transform="translate(-8.9332946,-0.99258829)" />
    </g>
    <g
       inkscape:transform-center-y="4.7026211"
       inkscape:transform-center-x="4.3562876"
       transform="matrix(0.44571202,0.56083743,-0.51953296,0.48114749,315.92291,-196.41915)"
       id="g9421">
      <g
         id="g7493"
         transform="matrix(1.3333333,0,0,-1.3333333,541.83631,306.50228)">
        <path
           d="m 0,0 c 2.208,4.672 8.008,6.83 13.127,6.116 5.118,-0.714 9.622,-3.732 13.529,-7.115 1.059,-0.917 2.19,-2.19 1.799,-3.535 -0.185,-0.635 -0.686,-1.128 -1.216,-1.524 -2.129,-1.59 -4.88,-2.042 -7.522,-2.316 -4.247,-0.44 -8.682,-0.521 -12.621,1.125 -3.939,1.647 -7.258,5.403 -7.217,9.672"
           style="fill:#79a316;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path7495"
           inkscape:connector-curvature="0" />
      </g>
      <g
         id="g8793"
         transform="matrix(1.3333333,0,0,-1.3333333,546.58804,303.27161)">
        <path
           d="m 0,0 c 3.321,4.012 9.2,3.519 13.609,1.891 4.389,-1.621 8.003,-4.933 11.44,-7.995 -0.013,0.263 -0.026,0.526 -0.039,0.789 -3.697,-3.44 -8.274,-5.465 -13.342,-5.597 -2.654,-0.069 -5.201,0.763 -7.481,2.064 -3.045,1.736 -6.522,6.207 -3.598,9.531 0.475,0.541 -0.354,1.289 -0.829,0.749 -4.284,-4.872 1.997,-11.047 6.617,-12.559 6.961,-2.279 14.236,0.201 19.461,5.063 0.222,0.206 0.173,0.599 -0.04,0.789 C 21.54,-1.482 17.174,2.176 11.57,3.707 7.35,4.861 2.09,4.274 -0.828,0.749 -1.287,0.195 -0.459,-0.554 0,0"
           style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path8795"
           inkscape:connector-curvature="0" />
      </g>
      <g
         id="g8797"
         transform="matrix(1.3333333,0,0,-1.3333333,575.31044,309.63828)">
        <path
           d="M 0,0 C -7.448,0.117 -14.763,1.25 -21.903,3.368 -22.592,3.573 -22.807,2.476 -22.121,2.273 -14.889,0.128 -7.471,-0.996 0.07,-1.114 0.79,-1.126 0.716,-0.011 0,0"
           style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path8799"
           inkscape:connector-curvature="0" />
      </g>
      <g
         id="g8801"
         transform="matrix(1.3333333,0,0,-1.3333333,565.50577,302.83441)">
        <path
           d="m 0,0 c -1.619,-1.389 -3.143,-2.872 -4.577,-4.451 -0.485,-0.534 0.345,-1.281 0.828,-0.749 1.434,1.58 2.958,3.062 4.577,4.451 C 1.374,-0.28 0.538,0.462 0,0"
           style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path8803"
           inkscape:connector-curvature="0" />
      </g>
      <g
         id="g8805"
         transform="matrix(1.3333333,0,0,-1.3333333,559.24857,309.96868)">
        <path
           d="m 0,0 c 1.205,-1.48 2.34,-3.01 3.406,-4.593 0.402,-0.598 1.338,0.01 0.936,0.608 -1.065,1.583 -2.2,3.113 -3.406,4.593 C 0.486,1.161 -0.454,0.557 0,0"
           style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path8807"
           inkscape:connector-curvature="0" />
      </g>
      <g
         id="g8809"
         transform="matrix(1.3333333,0,0,-1.3333333,555.51191,300.82681)">
        <path
           d="m 0,0 c -1.264,-1.457 -2.39,-3.01 -3.389,-4.66 -0.373,-0.616 0.627,-1.113 0.997,-0.501 0.948,1.565 2.021,3.03 3.22,4.412 C 1.3,-0.205 0.471,0.543 0,0"
           style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path8811"
           inkscape:connector-curvature="0" />
      </g>
      <g
         id="g8813"
         transform="matrix(1.3333333,0,0,-1.3333333,551.18431,307.73961)">
        <path
           d="M 0,0 C 0.901,-1.899 2.002,-3.657 3.346,-5.275 3.801,-5.823 4.742,-5.22 4.283,-4.667 3.005,-3.129 1.918,-1.458 1.06,0.35 0.755,0.992 -0.308,0.65 0,0"
           style="fill:#45595b;fill-opacity:1;fill-rule:nonzero;stroke:none"
           id="path8815"
           inkscape:connector-curvature="0" />
      </g>
    </g>
    <text
       id="text1410"
       y="230.50742"
       x="246.06671"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none"
       xml:space="preserve"><tspan
         y="230.50742"
         x="246.06671"
         id="tspan1408"
         sodipodi:role="line">X</tspan></text>
  </g>
  <script
     id="JessyInk"
     ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
	// Make sure we only execute this code once. Double execution can occur if the onload event handler is set
	// in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
	// not lead to any problems, but it takes more time.
	if (jessyInkInitialised)
		return;

	// Making the presentation scaleable.
	var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

	if (VIEWBOX)
	{
		WIDTH = ROOT_NODE.viewBox.animVal.width;
		HEIGHT = ROOT_NODE.viewBox.animVal.height;
	}
	else
	{
		HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
		WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
		ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
	}

	ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
	ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

	// Setting the background color.
	var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

	for (var counter = 0; counter &lt; namedViews.length; counter++)
	{
		if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
		{
			if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
			{
				BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
				var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

				if (ROOT_NODE.hasAttribute(&quot;style&quot;))
					newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

				ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
			}
		}
	}

	// Defining clip-path.
	var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

	if (defsNodes.length &gt; 0)
	{
		var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

		if (!existingClipPath)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
			var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);

			clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
			clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

			clipPath.appendChild(rectNode);
			defsNodes[0].appendChild(clipPath);
		}
	}

	// Making a list of the slide and finding the master slide.
	var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	var tempSlides = new Array();
	var existingJessyInkPresentationLayer = null;

	for (var counter = 0; counter &lt; nodes.length; counter++)
	{
		if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
		{
			if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
				masterSlide = nodes[counter];
			else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
				existingJessyInkPresentationLayer = nodes[counter];
			else
				tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
		}
		else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
		{
			handleElement(nodes[counter]);
		}
	}

	// Hide master slide set default transitions.
	if (masterSlide)
	{
		masterSlide.style.display = &quot;none&quot;;

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
	}

	if (existingJessyInkPresentationLayer != null)
	{
		existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
	}

	// Set start slide.
	var hashObj = new LocationHash(window.location.hash);

	activeSlide = hashObj.slideNumber;
	activeEffect = hashObj.effectNumber;

	if (activeSlide &lt; 0)
		activeSlide = 0;
	else if (activeSlide &gt;= tempSlides.length)
		activeSlide = tempSlides.length - 1;

	var originalNode = document.getElementById(tempSlides[counter]);

	var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
	JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
	JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
	ROOT_NODE.appendChild(JessyInkPresentationLayer);

	// Gathering all the information about the transitions and effects of the slides, set the background
	// from the master slide and substitute the auto-texts.
	for (var counter = 0; counter &lt; tempSlides.length; counter++)
	{
		var originalNode = document.getElementById(tempSlides[counter]);
		originalNode.style.display = &quot;none&quot;;
		var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
		JessyInkPresentationLayer.appendChild(node);
		slides[counter] = new Object();
		slides[counter][&quot;original_element&quot;] = originalNode;
		slides[counter][&quot;element&quot;] = node;

		// Set build in transition.
		slides[counter][&quot;transitionIn&quot;] = new Object();

		var dict;

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
		else
			dict = defaultTransitionInDict;

		slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

		// Set build out transition.
		slides[counter][&quot;transitionOut&quot;] = new Object();

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
		else
			dict = defaultTransitionOutDict;

		slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

		// Copy master slide content.
		if (masterSlide)
		{
			var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
			clonedNode.style.display = &quot;inherit&quot;;

			node.insertBefore(clonedNode, node.firstChild);
		}

		// Setting clip path.
		node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

		// Substitute auto texts.
		substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

		// Set effects.
		var tempEffects = new Array();
		var groups = new Object();

		for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
		{
			var propName = &quot;&quot;;
			var dir = 0;

			if (IOCounter == 0)
			{
				propName = &quot;effectIn&quot;;
				dir = 1;
			}
			else if (IOCounter == 1)
			{
				propName = &quot;effectOut&quot;;
				dir = -1;
			}

			var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

			for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
			{
				var element = document.getElementById(effects[effectCounter]);
				var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

				// Put every element that has an effect associated with it, into its own group.
				// Unless of course, we already put it into its own group.
				if (!(groups[element.id]))
				{
					var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

					element.parentNode.insertBefore(newGroup, element);
					newGroup.appendChild(element.parentNode.removeChild(element));
					groups[element.id] = newGroup;
				}

				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = dir;
				effectDict[&quot;element&quot;] = groups[element.id];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				if (!tempEffects[dict[&quot;order&quot;]])
					tempEffects[dict[&quot;order&quot;]] = new Array();

				tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
			}
		}

		// Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
		node.setAttribute(&quot;opacity&quot;,0);
		node.style.display = &quot;inherit&quot;;

		// Create a transform group.
		var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		// Add content to transform group.
		while (node.firstChild)
			transformGroup.appendChild(node.firstChild);

		// Transfer the transform attribute from the node to the transform group.
		if (node.getAttribute(&quot;transform&quot;))
		{
			transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
			node.removeAttribute(&quot;transform&quot;);
		}

		// Create a view group.
		var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		viewGroup.appendChild(transformGroup);
		slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

		// Insert background.
		if (BACKGROUND_COLOR != null)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);
			rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
			rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

			slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
		}

		// Set views.
		var tempViews = new Array();
		var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
		var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

		// Set initial view even if there are no other views.
		slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
		slides[counter].initialView = matrixOld.toAttribute();

		for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
		{
			var element = document.getElementById(views[viewCounter]);
			var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

			if (dict[&quot;order&quot;] == 0)
			{
				matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
				slides[counter].initialView = matrixOld.toAttribute();
			}
			else
			{
				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = 1;
				effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
				effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

				tempViews[dict[&quot;order&quot;]] = effectDict;
			}

			// Remove element.
			element.parentNode.removeChild(element);
		}

		// Consolidate view array and append it to the effect array.
		if (tempViews.length &gt; 0)
		{
			for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
			{
				if (tempViews[viewCounter])
				{
					tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
					matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

					if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
						tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

					tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
				}
			}
		}

		// Set consolidated effect array.
		if (tempEffects.length &gt; 0)
		{
			slides[counter][&quot;effects&quot;] = new Array();

			for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
			{
				if (tempEffects[effectCounter])
					slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
			}
		}

		node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

		// Set visibility for initial state.
		if (counter == activeSlide)
		{
			node.style.display = &quot;inherit&quot;;
			node.setAttribute(&quot;opacity&quot;,1);
		}
		else
		{
			node.style.display = &quot;none&quot;;
			node.setAttribute(&quot;opacity&quot;,0);
		}
	}

	// Set key handler.
	var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
	{
		var elem = jessyInkObjects[counter];

		if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
		{
			if (elem.getCustomKeyBindings != undefined)
				keyCodeDictionary = elem.getCustomKeyBindings();

			if (elem.getCustomCharBindings != undefined)
				charCodeDictionary = elem.getCustomCharBindings();
		}
	}

	// Set mouse handler.
	var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

	for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
	{
		var elem = jessyInkMouseHandler[counter];

		if (elem.getMouseHandler != undefined)
		{
			var tempDict = elem.getMouseHandler();

			for (mode in tempDict)
			{
				if (!mouseHandlerDictionary[mode])
					mouseHandlerDictionary[mode] = new Object();

				for (handler in tempDict[mode])
					mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
			}
		}
	}

	// Check effect number.
	if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
	{
		activeEffect = 0;
	}
	else if (activeEffect &gt; slides[activeSlide].effects.length)
	{
		activeEffect = slides[activeSlide].effects.length;
	}

	createProgressBar(JessyInkPresentationLayer);
	hideProgressBar();
	setProgressBarValue(activeSlide);
	setTimeIndicatorValue(0);
	setInterval(&quot;updateTimer()&quot;, 1000);
	setSlideToState(activeSlide, activeEffect);
	jessyInkInitialised = true;
}

/** Function to subtitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
	var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

	for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
	{
		if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
			texts[textCounter].firstChild.nodeValue = slideNumber;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
			texts[textCounter].firstChild.nodeValue = numberOfSlides;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
			texts[textCounter].firstChild.nodeValue = slideName;
	}
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *	This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
	var elems = new Array();

	if (node.getAttributeNS(namespace, name))
		elems.push(node.getAttribute(&quot;id&quot;));

	for (var counter = 0; counter &lt; node.childNodes.length; counter++)
	{
		if (node.childNodes[counter].nodeType == 1)
			elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
	}

	return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (dir == 1)
		{
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
			activeEffect += dir;
		}
		else if (dir == -1)
		{
			activeEffect += dir;
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
		}

		transCounter = 0;
		startTime = (new Date()).getTime();
		lastFrameTime = null;
		effect(dir);
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
			activeEffect = slides[activeSlide][&quot;effects&quot;].length;
		else
			activeEffect = 0;

		if (dir == 1)
			setSlideToState(activeSlide, STATE_END);
		else
			setSlideToState(activeSlide, STATE_START);

		processingEffect = false;
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
	processingEffect = true;
	effectArray = new Array();

	effectArray[0] = new Object();
	if (dir == 1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = -1;
	}
	else if (dir == -1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = 1;
	}
	effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	activeSlide += dir;
	setProgressBarValue(activeSlide);

	effectArray[1] = new Object();

	if (dir == 1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = 1;
	}
	else if (dir == -1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = -1;
	}

	effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
		activeEffect = slides[activeSlide][&quot;effects&quot;].length;
	else
		activeEffect = 0;

	if (dir == -1)
		setSlideToState(activeSlide, STATE_END);
	else
		setSlideToState(activeSlide, STATE_START);

	transCounter = 0;
	startTime = (new Date()).getTime();
	lastFrameTime = null;
	effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
	var suspendHandle = ROOT_NODE.suspendRedraw(500);

	if (currentMode == SLIDE_MODE)
	{
		hideProgressBar();		
		INDEX_OFFSET = -1;
		indexSetPageSlide(activeSlide);
		currentMode = INDEX_MODE;
	}
	else if (currentMode == INDEX_MODE)
	{
		for (var counter = 0; counter &lt; slides.length; counter++)
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

			if (counter == activeSlide)
			{
				slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
				activeEffect = 0;
			}
			else
			{
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
				slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
			}
		}
		currentMode = SLIDE_MODE;
		setSlideToState(activeSlide, STATE_START);
		setProgressBarValue(activeSlide);

		if (progress_bar_visible)
		{
			showProgressBar();
		}
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
	var done = true;

	var suspendHandle = ROOT_NODE.suspendRedraw(200);

	for (var counter = 0; counter &lt; effectArray.length; counter++)
	{
		if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
			done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
			done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
			done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
			done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();

	if (!done)
	{
		var currentTime = (new Date()).getTime();
		var timeDiff = 1;

		transCounter = currentTime - startTime;

		if (lastFrameTime != null)
		{
			timeDiff = timeStep - (currentTime - lastFrameTime);

			if (timeDiff &lt;= 0)
				timeDiff = 1;
		}

		lastFrameTime = currentTime;

		window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
	}
	else
	{
		window.location.hash = (activeSlide + 1) + '_' + activeEffect;
		processingEffect = false;
	}
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
	var offsetX = 0;
	var offsetY = 0;

	if (offsetNumber &lt; 0)
		offsetNumber = 0;
	else if (offsetNumber &gt;= slides.length)
		offsetNumber = slides.length - 1;

	for (var counter = 0; counter &lt; slides.length; counter++)
	{
		if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
			slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
		}
		else
		{
			offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
			offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
			slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
		}

		setSlideToState(counter, STATE_END);
	}

	//do we need to save the current offset?
	if (INDEX_OFFSET != offsetNumber)
		INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

	activeSlide = parseInt(nbr);

	setSlideToState(activeSlide, STATE_START);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

	activeEffect = 0;
	setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

	activeSlide = parseInt(nbr);
	window.location.hash = (activeSlide + 1) + '_0';

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view. 
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	//calculate the offset
	var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

	if (offset &lt; 0)
		offset = 0;

	//if different from kept offset, then record and change the page
	if (offset != INDEX_OFFSET)
	{
		INDEX_OFFSET = offset;
		displayIndex(INDEX_OFFSET);
	}

	//set the active slide
	indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
	if (!e)
		e = window.event;

	code = e.keyCode || e.charCode;

	if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
		return keyCodeDictionary[currentMode][code]();
	else
		document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
	document.onkeypress = null;

	if (!e)
		e = window.event;

	str = String.fromCharCode(e.keyCode || e.charCode);

	if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
		return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
	var charCodeDict = new Object();

	charCodeDict[SLIDE_MODE] = new Object();
	charCodeDict[INDEX_MODE] = new Object();
	charCodeDict[DRAWING_MODE] = new Object();

	charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
	charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
	charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
	charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
	charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
	charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

	charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
	charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
	charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
	charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
	charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
	charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
	charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
	charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
	charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
	charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
	charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
	charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
	charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
	charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
	charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
	charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
	charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

	charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

	return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
	var keyCodeDict = new Object();

	keyCodeDict[SLIDE_MODE] = new Object();
	keyCodeDict[INDEX_MODE] = new Object();
	keyCodeDict[DRAWING_MODE] = new Object();

	keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
	keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
	keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
	keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
	keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

	keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
	keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
	keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
	keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
	keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

	keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

	return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *	@param	evnt	event
 *	@param	action	type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
	if (!evnt)
		evnt = window.event;

	var retVal = true;

	if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
	{
		var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

		if (subRetVal != null &amp;&amp; subRetVal != undefined)
			retVal = subRetVal;
	}

	if (evnt.preventDefault &amp;&amp; !retVal)
		evnt.preventDefault();

	evnt.returnValue = retVal;

	return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
	window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
	var mouseHandlerDict = new Object();

	mouseHandlerDict[SLIDE_MODE] = new Object();
	mouseHandlerDict[INDEX_MODE] = new Object();
	mouseHandlerDict[DRAWING_MODE] = new Object();

	mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
	mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

	mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

	mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

	return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
	currentMode = DRAWING_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
	currentMode = SLIDE_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &gt;= 3)
	{
		INDEX_COLUMNS -= 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &lt; 7)
	{
		INDEX_COLUMNS += 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
	if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
	{
		INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
	path_width = path_width_default;
	set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
	path_width = width;
	set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
	path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
	var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

	if ((new_duration != null) &amp;&amp; (new_duration != ''))
	{
		timer_duration = new_duration;
	}

	updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
	addSlide(afterSlide);
	slideSetActiveSlide(afterSlide + 1);
	updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
	if (progress_bar_visible)
	{
		progress_bar_visible = false;
		hideProgressBar();
	}
	else
	{
		progress_bar_visible = true;
		showProgressBar();
	}
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
	timer_start = timer_elapsed;
	updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
	var outStr = str;

	while (outStr.length &lt; len)
	{
		outStr = '0' + outStr;
	}

	return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
	// Suspend redraw since we are going to mess with the slides.
	var suspendHandle = ROOT_NODE.suspendRedraw(2000);

	var tmpActiveSlide = activeSlide;
	var tmpActiveEffect = activeEffect;
	var exportedLayers = new Array();

	for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
	{
		var exportNode;

		setSlideToState(counterSlides, STATE_START);

		var maxEffect = 0;

		if (slides[counterSlides].effects)
		{
			maxEffect = slides[counterSlides].effects.length;
		}

		exportNode = slides[counterSlides].element.cloneNode(true);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

		exportedLayers.push(exportNode);

		if (slides[counterSlides][&quot;effects&quot;])
		{	
			for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}

				var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
				exportNode = slides[counterSlides].element.cloneNode(true);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
				exportNode.setAttribute(&quot;id&quot;, layerName);

				exportedLayers.push(exportNode);
			}
		}
	}

	activeSlide = tmpActiveSlide;
	activeEffect = tmpActiveEffect;
	setSlideToState(activeSlide, activeEffect);

	// Copy image.
	var newDoc = document.documentElement.cloneNode(true);

	// Delete viewbox form new imag and set width and height.
	newDoc.removeAttribute('viewbox');
	newDoc.setAttribute('width', WIDTH);
	newDoc.setAttribute('height', HEIGHT);

	// Delete all layers and script elements.
	var nodesToBeRemoved = new Array();

	for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
	{
		var child = newDoc.childNodes[childCounter];

		if (child.nodeType == 1)
		{
			if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
			{
				nodesToBeRemoved.push(child);
			}
		}
	}

	for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
	{
		var nd = nodesToBeRemoved[ndCounter];

		// Before removing the node, check whether it contains any definitions.
		var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

		for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
		{
			if (defs[defsCounter].id)
			{
				newDoc.appendChild(defs[defsCounter].cloneNode(true));
			}
		}

		// Remove node.
		nd.parentNode.removeChild(nd);
	}

	// Set current layer.
	if (exportedLayers[0])
	{
		var namedView;

		for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
		{
			if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
			{
				namedView = newDoc.childNodes[nodeCounter];
			}
		}

		if (namedView)
		{
			namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
		}
	}

	// Add exported layers.
	while (exportedLayers.length &gt; 0)
	{
		var nd = exportedLayers.pop();

		nd.setAttribute(&quot;opacity&quot;,1);
		nd.style.display = &quot;inherit&quot;;

		newDoc.appendChild(nd);
	}

	// Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

	// Unsuspend redraw.
	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
	mouse_presentation_path = null;
	mouse_original_path = null;

	if (history_presentation_elements.length &gt; 0)
	{
		var p = history_presentation_elements.pop();
		var parent = p.parentNode.removeChild(p);

		p = history_original_elements.pop();
		parent = p.parentNode.removeChild(p);
	}
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
	var value = 0;

	if (e.button)
		value = e.button;
	else if (e.which)
		value = e.which;

	if (value == 1)
	{
		history_counter++;

		var p = calcCoord(e);

		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
		mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
		mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
		slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
		history_original_elements.push(mouse_original_path);

		mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
		mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

		if (slides[activeSlide][&quot;viewGroup&quot;])
			slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
		else
			slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

		history_presentation_elements.push(mouse_presentation_path);

		return false;
	}

	return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
	if(!e)
		e = window.event;

	if (mouse_presentation_path != null)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_presentation_path = null;
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path = null;

		return false;
	}

	return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
	if(!e)
		e = window.event;

	var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

	if (mouse_presentation_path == null)
	{
		return true;
	}

	if (dist &gt;= mouse_min_dist_sqr)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
	}

	return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		skipEffects(-1);
	else if (delta &lt; 0)
		skipEffects(1);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
	else if (delta &lt; 0)
		indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
	var svgPoint1 = document.documentElement.createSVGPoint();
	var svgPoint2 = document.documentElement.createSVGPoint();

	svgPoint1.x = 0.0;
	svgPoint1.y = 0.0;
	svgPoint2.x = 1.0;
	svgPoint2.y = 0.0;

	var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

	svgPoint1 = svgPoint1.matrixTransform(matrix);
	svgPoint2 = svgPoint2.matrixTransform(matrix);

	path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if (!options[&quot;matrixInitial&quot;])
	{
		var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

		if (tempString)
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
		else
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
	}

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
		}
	}

	return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;none&quot;;
			element.setAttribute(&quot;opacity&quot;, 0);
		}
		else if (fraction &gt;= 1)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, fraction);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
		}
	}
	return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
	if (dir == 1)
	{
		element.style.display = &quot;inherit&quot;;
		element.setAttribute(&quot;opacity&quot;,1);
	}
	else if (dir == -1)
	{
		element.style.display = &quot;none&quot;;
		element.setAttribute(&quot;opacity&quot;,0);
	}
	return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
	var length = 500;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
			element.style.display = &quot;none&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;inherit&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			var opacityFraction = fraction * 3;
			if (opacityFraction &gt; 1)
				opacityFraction = 1;
			element.setAttribute(&quot;opacity&quot;, opacityFraction);
			var offsetX = WIDTH * (1.0 - fraction) / 2.0;
			var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
			element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
			element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
	}
	return false;
}

/** Function to set a slide either to the start or the end state.
 *  
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
	slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

	if (slides[slide][&quot;effects&quot;])
	{	
		if (state == STATE_END)
		{
			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
		else if (state == STATE_START)
		{
			for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
				}
			}
		}
		else
		{
			setSlideToState(slide, STATE_START);

			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
	}

	window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *	@param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
	var list = str.split(&quot;;&quot;);
	var obj = new Object();

	for (var counter = 0; counter &lt; list.length; counter++)
	{
		var subStr = list[counter];
		var subList = subStr.split(&quot;:&quot;);
		if (subList.length == 2)
		{
			obj[subList[0]] = subList[1];
		}	
	}

	return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
	var str = &quot;&quot;;

	for (var key in dict)
	{
		str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
	}

	return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *	@param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
	if (node.nodeType == 1)
	{
		if (node.getAttribute(&quot;id&quot;))
		{
			var id = node.getAttribute(&quot;id&quot;)
				replace[&quot;#&quot; + id] = id + suffix;
			node.setAttribute(&quot;id&quot;, id + suffix);
		}

		if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
			node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

		if (node.childNodes)
		{
			for (var counter = 0; counter &lt; node.childNodes.length; counter++)
				suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
		}
	}
}

/** Function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
	var replace = new Object();

	suffixNoneIds_sub(node, suffix, replace);

	return node;
}

/** Function to build a progress bar.
 *	
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
	rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
	rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
	rect_progress_bar.setAttribute(&quot;x&quot;, 0);
	rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
	rect_progress_bar.setAttribute(&quot;width&quot;, 0);
	rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
	g.appendChild(rect_progress_bar);

	var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
	circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
	circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
	circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
	g.appendChild(circle_timer_indicator);

	parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *	
 */
function hideProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *	
 */
function showProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *	
 *	@param value the current slide number
 *
 */
function setProgressBarValue(value)
{
	var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

	if (!rect_progress_bar)
	{
		return;
	}

	if (value &lt; 1)
	{
		// First slide, assumed to be the title of the presentation
		var x = 0;
		var w = 0.01 * HEIGHT;
	}
	else if (value &gt;= slides.length - 1)
	{
		// Last slide, assumed to be the end of the presentation
		var x = WIDTH - 0.01 * HEIGHT;
		var w = 0.01 * HEIGHT;
	}
	else
	{
		value -= 1;
		value /= (slides.length - 2);

		var x = WIDTH * value;
		var w = WIDTH / (slides.length - 2);
	}

	rect_progress_bar.setAttribute(&quot;x&quot;, x);
	rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *	
 *	@param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
	var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

	if (!circle_timer_indicator)
	{
		return;
	}

	if (value &lt; 0.0)
	{
		value = 0.0;
	}

	if (value &gt; 1.0)
	{
		value = 1.0;
	}

	var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
	circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *	
 */
function updateTimer()
{
	timer_elapsed += 1;
	setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system	
 */
function calcCoord(e)
{
	var svgPoint = document.documentElement.createSVGPoint();
	svgPoint.x = e.clientX + window.pageXOffset;
	svgPoint.y = e.clientY + window.pageYOffset;

	var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

	svgPoint = svgPoint.matrixTransform(matrix.inverse());
	return svgPoint;
}

/** Add slide.
 *
 *	@param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
	number_of_added_slides++;

	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var new_slide = new Object();
	new_slide[&quot;element&quot;] = g;

	// Set build in transition.
	new_slide[&quot;transitionIn&quot;] = new Object();
	var dict = defaultTransitionInDict;
	new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

	// Set build out transition.
	new_slide[&quot;transitionOut&quot;] = new Object();
	dict = defaultTransitionOutDict;
	new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

	// Copy master slide content.
	if (masterSlide)
	{
		var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
		clonedNode.style.display = &quot;inherit&quot;;

		g.appendChild(clonedNode);
	}

	// Substitute auto texts.
	substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

	g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

	// Create a transform group.
	var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	// Add content to transform group.
	while (g.firstChild)
		transformGroup.appendChild(g.firstChild);

	// Transfer the transform attribute from the node to the transform group.
	if (g.getAttribute(&quot;transform&quot;))
	{
		transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
		g.removeAttribute(&quot;transform&quot;);
	}

	// Create a view group.
	var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	viewGroup.appendChild(transformGroup);
	new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

	// Insert background.
	if (BACKGROUND_COLOR != null)
	{
		var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

		rectNode.setAttribute(&quot;x&quot;, 0);
		rectNode.setAttribute(&quot;y&quot;, 0);
		rectNode.setAttribute(&quot;width&quot;, WIDTH);
		rectNode.setAttribute(&quot;height&quot;, HEIGHT);
		rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
		rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

		new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
	}

	// Set initial view even if there are no other views.
	var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

	new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
	new_slide.initialView = matrixOld.toAttribute();

	// Insert slide
	var node = slides[after_slide][&quot;element&quot;];
	var next_node = node.nextSibling;
	var parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	new_slide[&quot;original_element&quot;] = g;

	node = slides[after_slide][&quot;original_element&quot;];
	next_node = node.nextSibling;
	parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	before_new_slide = slides.slice(0, after_slide + 1);
	after_new_slide = slides.slice(after_slide + 1);
	slides = before_new_slide.concat(new_slide, after_new_slide);

	//resetting the counter attributes on the slides that follow the new slide...
	for (var counter = after_slide+2; counter &lt; slides.length; counter++)
	{
		slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
	}
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *	@param mPoints Point matrix.
 *	@return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
	mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

	return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *	@param rect an svg rectangle
 *	@return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
	rectWidth = rect.getBBox().width;
	rectHeight = rect.getBBox().height;
	rectX = rect.getBBox().x;
	rectY = rect.getBBox().y;
	rectXcorr = 0;
	rectYcorr = 0;

	scaleX = WIDTH / rectWidth;
	scaleY = HEIGHT / rectHeight;

	if (scaleX &gt; scaleY)
	{
		scaleX = scaleY;
		rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
		rectWidth = WIDTH / scaleX;
	}	
	else
	{
		scaleY = scaleX;
		rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
		rectHeight = HEIGHT / scaleY;
	}

	if (rect.transform.baseVal.numberOfItems &lt; 1)
	{
		mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
	}
	else
	{
		mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
	}

	newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
	newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

	return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *	@param	node	Element node.
 */
function handleElement(node)
{
	if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
	{
		var url;
		var width;
		var height;
		var x;
		var y;
		var transform;

		var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

		for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
		{
			if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
			{
				url = tspans[tspanCounter].firstChild.nodeValue;
			}
		}

		var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

		for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
		{
			if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
			{
				x = rects[rectCounter].getAttribute(&quot;x&quot;);
				y = rects[rectCounter].getAttribute(&quot;y&quot;);
				width = rects[rectCounter].getAttribute(&quot;width&quot;);
				height = rects[rectCounter].getAttribute(&quot;height&quot;);
				transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
			}
		}

		for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
		{
			if (node.childNodes[childCounter].nodeType == 1)
			{
				if (node.childNodes[childCounter].style)
				{
					node.childNodes[childCounter].style.display = 'none';
				}
				else
				{
					node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
				}
			}
		}

		var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
		foreignNode.setAttribute(&quot;x&quot;, x);
		foreignNode.setAttribute(&quot;y&quot;, y);
		foreignNode.setAttribute(&quot;width&quot;, width);
		foreignNode.setAttribute(&quot;height&quot;, height);
		foreignNode.setAttribute(&quot;transform&quot;, transform);

		var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
		videoNode.setAttribute(&quot;src&quot;, url);

		foreignNode.appendChild(videoNode);
		node.appendChild(foreignNode);
	}
}

/** Class processing the location hash.
 *
 *	@param str location hash
 */
function LocationHash(str)
{
	this.slideNumber = 0;
	this.effectNumber = 0;

	str = str.substr(1, str.length - 1);

	var parts = str.split('_');

	// Try to extract slide number.
	if (parts.length &gt;= 1)
	{
		try
		{
			var slideNumber = parseInt(parts[0]);

			if (!isNaN(slideNumber))
			{
				this.slideNumber = slideNumber - 1;
			}
		}
		catch (e)
		{
		}
	}
	
	// Try to extract effect number.
	if (parts.length &gt;= 2)
	{
		try
		{
			var effectNumber = parseInt(parts[1]);

			if (!isNaN(effectNumber))
			{
				this.effectNumber = effectNumber;
			}
		}
		catch (e)
		{
		}
	}
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
	this.e11 = 0; // a
	this.e12 = 0; // c
	this.e13 = 0; // e
	this.e21 = 0; // b
	this.e22 = 0; // d
	this.e23 = 0; // f
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 0;
}

/** Constructor function.
 *
 *	@param a element a (i.e. 1, 1) as described in the svg standard.
 *	@param b element b (i.e. 2, 1) as described in the svg standard.
 *	@param c element c (i.e. 1, 2) as described in the svg standard.
 *	@param d element d (i.e. 2, 2) as described in the svg standard.
 *	@param e element e (i.e. 1, 3) as described in the svg standard.
 *	@param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
	this.e11 = a;
	this.e12 = c;
	this.e13 = e;
	this.e21 = b;
	this.e22 = d;
	this.e23 = f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
	this.e11 = m.a;
	this.e12 = m.c;
	this.e13 = m.e;
	this.e21 = m.b;
	this.e22 = m.d;
	this.e23 = m.f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param e11 element 1, 1 of the matrix.
 *	@param e12 element 1, 2 of the matrix.
 *	@param e13 element 1, 3 of the matrix.
 *	@param e21 element 2, 1 of the matrix.
 *	@param e22 element 2, 2 of the matrix.
 *	@param e23 element 2, 3 of the matrix.
 *	@param e31 element 3, 1 of the matrix.
 *	@param e32 element 3, 2 of the matrix.
 *	@param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;

	return this;
}

/** Constructor function.
 *
 *	@param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
	str = attrString.substr(7, attrString.length - 8);

	str = str.trim();

	strArray = str.split(&quot;,&quot;);

	// Opera does not use commas to separate the values of the matrix, only spaces.
	if (strArray.length != 6)
		strArray = str.split(&quot; &quot;);

	this.e11 = parseFloat(strArray[0]);
	this.e21 = parseFloat(strArray[1]);
	this.e31 = 0;
	this.e12 = parseFloat(strArray[2]);
	this.e22 = parseFloat(strArray[3]);
	this.e32 = 0;
	this.e13 = parseFloat(strArray[4]);
	this.e23 = parseFloat(strArray[5]);
	this.e33 = 1;

	return this;
}

/** Output function
 *
 *	@return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
	return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *	@return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
	out = new matrixSVG();

	det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

	out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
	out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
	out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
	out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
	out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
	out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
	out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
	out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
	out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

	return out;
}

/** Matrix multiplication.
 *
 *	@param op another svg matrix
 *	@return this * op
 */
matrixSVG.prototype.mult = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
	out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
	out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
	out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
	out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
	out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
	out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
	out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
	out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

	return out;
}

/** Matrix addition.
 *
 *	@param op another svg matrix
 *	@return this + op
 */
matrixSVG.prototype.add = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 + op.e11;
	out.e12 = this.e12 + op.e12;
	out.e13 = this.e13 + op.e13;
	out.e21 = this.e21 + op.e21;
	out.e22 = this.e22 + op.e22;
	out.e23 = this.e23 + op.e23;
	out.e31 = this.e31 + op.e31;
	out.e32 = this.e32 + op.e32;
	out.e33 = this.e33 + op.e33;

	return out;
}

/** Matrix mixing.
 *
 *	@param op another svg matrix
 *	@parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *	@return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
	contribThis = 1.0 - contribOp;
	out = new matrixSVG();

	out.e11 = contribThis * this.e11 + contribOp * op.e11;
	out.e12 = contribThis * this.e12 + contribOp * op.e12;
	out.e13 = contribThis * this.e13 + contribOp * op.e13;
	out.e21 = contribThis * this.e21 + contribOp * op.e21;
	out.e22 = contribThis * this.e22 + contribOp * op.e22;
	out.e23 = contribThis * this.e23 + contribOp * op.e23;
	out.e31 = contribThis * this.e31 + contribOp * op.e31;
	out.e32 = contribThis * this.e32 + contribOp * op.e32;
	out.e33 = contribThis * this.e33 + contribOp * op.e33;

	return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
	return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};
</script>
  <g
     transform="matrix(0.14063998,0,0,0.12280089,36.567378,278.35011)"
     id="g1406">
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#2c3a64;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil2"
       d="m 361.02031,1514.0084 c 0.288,0.192 0.67199,0.288 1.15199,0.48 h 223.39039 c -2.11198,-7.9681 -9.40793,-22.464 -34.94375,-26.5919 -34.65575,-5.664 -94.75131,-25.7279 -108.19122,-70.1755 -0.384,-1.4399 -0.76799,-2.88 -1.15199,-4.32 -10.65592,-47.4237 -88.03137,14.4959 -88.03137,14.4959 0,0 -0.28799,1.9201 -0.57599,5.088 -1.82399,17.3758 -6.43196,73.6314 8.35194,81.0235 z"
       id="path655" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#2c3a64;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil2"
       d="m 656.50618,711.55002 c 0,0 -145.34295,516.18828 -189.02264,715.77088 0,0 -107.80722,21.5998 -124.6071,-12.2879 0,0 34.75175,-562.07601 98.68729,-633.49949 79.48743,-88.79945 215.03845,-69.98349 215.03845,-69.98349 z"
       id="path657" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#ed975d;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil3"
       d="m 668.60219,188.44968 c 0,0 -3.84007,-23.13583 2.11189,-42.3357 5.95205,-19.19986 30.81588,-69.983494 22.94393,-87.551374 -7.87204,-17.66387 -36.38374,-64.9915299 -53.95171,-64.8955299 -17.56787,0.096 18.52787,50.7836299 13.536,66.5275199 -4.99206,15.83989 -6.62405,17.08788 -12.672,15.74389 -6.14396,-1.43999 -15.35989,-31.67977 -18.52787,-24.57582 -3.07198,7.10394 -1.24799,53.855614 4.51197,65.567524 5.75996,11.71192 -6.14396,77.66345 -6.14396,77.66345 l 48.09575,-6.04796 z"
       id="path659" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#aa0000;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil4"
       d="m 682.61809,178.17775 c 0,0 -38.87972,-22.07984 -69.0236,-12.7679 0,0 -59.71157,172.03076 -92.63933,298.46185 C 457.88361,308.06482 419.00389,152.73794 419.00389,152.73794 c 0,0 -76.51145,105.69524 -104.15925,175.96673 -27.6478,70.2715 137.47101,316.89372 201.59855,336.18959 66.91152,20.15995 54.71961,0 92.44734,-21.59975 12.09591,-15.74399 50.97563,-94.17533 73.72756,-465.11676 z"
       id="path661" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#2c3a64;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil2"
       d="m 858.68069,1522.0722 c 0.288,0.192 0.672,0.288 1.1521,0.48 h 223.39041 c -2.112,-7.9678 -9.4079,-22.4637 -34.9437,-26.5918 -34.6558,-5.664 -94.75131,-25.7278 -108.19121,-70.1755 -0.384,-1.44 -0.768,-2.88 -1.152,-4.32 -10.6561,-47.4236 -88.0314,14.4959 -88.0314,14.4959 0,0 -0.192,1.92 -0.576,5.088 -1.824,17.376 -6.4321,73.6315 8.3518,81.0234 z"
       id="path663" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#35488b;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil5"
       d="m 699.89787,699.07011 c 0,0 -21.79175,9.69593 -48.67165,29.47178 -3.07198,-15.55188 -7.48785,-25.63181 -7.48785,-25.63181 -191.71072,-49.91964 -705.019026,-45.88767 -705.019026,-45.88767 0,0 -110.303204,27.6478 -77.951434,188.25468 29.85578,147.8389 522.62024,79.3914 681.78709,35.0397 3.74398,-1.056 7.29595,-2.112 10.84792,-3.2639 -12.6719,94.1753 76.03146,228.57431 153.695,352.12541 64.03154,101.9513 118.46314,205.0545 118.46314,205.0545 32.15963,19.9679 140.06303,8.448 140.06303,8.448 C 897.46459,1250.0103 699.80187,698.97411 699.80187,698.97411 Z"
       id="path665" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#ffb27d;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil6"
       d="m 276.73291,100.51431 c 0,0 55.00761,176.25474 137.75901,215.61445 0,0 7.77595,-53.47161 -5.56796,-94.07932 10.94392,-8.35194 20.54386,-16.12789 28.99179,-23.13584 28.0318,-23.32783 42.2397,-38.30372 42.2397,-38.30372 L 467.86754,74.690496 459.5156,16.418916 c -13.4399,15.45589 -27.3598,28.03179 -41.1837,38.39972 -71.42349,53.279624 -141.59899,45.695674 -141.59899,45.695674 z"
       id="path667" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#ed975d;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil3"
       d="m 418.3319,54.818636 c 0,0 -27.74381,76.319454 19.58385,144.094964 28.0318,-23.32783 42.2397,-38.30372 42.2397,-38.30372 L 467.86754,74.690496 C 438.29975,58.178616 418.3319,54.722636 418.3319,54.722636 Z"
       id="path669" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#ffb27d;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil6"
       d="m 501.1793,177.40976 c 0,0 -121.91912,-80.831424 -70.36749,-155.998884 51.55163,-75.16746 70.46349,-136.223016 150.52691,-87.743369 79.96743,48.479649 75.26346,87.359369 64.22354,116.639159 C 634.42634,79.586456 534.20306,196.51362 501.1793,177.40976 Z"
       id="path671" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#550000;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil7"
       d="m 444.9237,-135.93199 c -0.57599,-2.01599 -2.78398,-4.60797 -9.02393,-8.06394 0,0 6.62395,-0.768 13.5359,2.39998 5.75996,-8.35193 18.14387,-21.88783 35.23175,-18.33586 0,0 -10.36793,0.384 -16.03189,9.40793 26.59181,-9.69593 70.84749,-4.60796 171.07077,54.911598 132.19105,78.431438 43.00779,145.630948 19.96786,147.550938 -23.03974,1.91999 -53.56761,-49.2476399 -88.03137,-62.87955 -34.46375,-13.5359 -64.60753,32.06377 -79.19943,33.21576 -14.49589,1.152 -4.31997,-8.44794 -16.12788,-22.94382991 C 464.50756,-15.164864 450.49166,9.7949561 446.74769,28.610826 c -3.74397,18.81586 -35.42374,30.52778 -35.42374,30.52778 0,0 0,0 -9.79193,-33.50376 -9.79193,-33.5037599 18.23986,-141.214986 38.11172,-157.438866 1.72799,-1.43999 3.55198,-2.87998 5.27996,-4.31997 z"
       id="path673" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#aa0000;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil8"
       d="m 425.05185,394.1762 c -36.57574,86.68738 -70.0795,142.07898 -74.49547,149.37493 -15.74388,26.11181 -32.73576,50.01573 -48.19165,70.94358 -0.48,0.6719 -0.95999,1.34399 -1.43999,2.01589 -30.52778,41.0878 -77.18345,52.31972 -75.74346,62.68765 2.87998,20.63985 -49.24764,70.17549 -135.263016,92.15934 -99.7432895,25.53581 -215.422454,37.72773 -244.606244,4.03197 -9.79193,-11.32792 -13.05591,-32.15977 -11.90392,-58.07959 2.11199,-54.5276 70.847494,-274.17412 70.847494,-274.17412 C 21.662754,87.746396 358.04433,87.746396 358.04433,87.746396 c 0,0 -6.62395,85.151394 75.93545,114.719184 0.096,0.192 19.39186,124.9911 -8.83193,191.90262 z"
       id="path675" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#ffb27d;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil6"
       d="m 622.61843,647.03838 c 0,0 50.49563,17.85588 64.31953,26.49591 13.824,8.63994 45.69577,52.31962 49.34375,67.58351 3.55187,15.26389 7.77584,60.28757 5.18386,67.77552 -2.59188,7.48794 -41.2796,-21.31185 -49.82364,-48.47966 -8.54394,-27.1678 -30.62378,-34.46375 -29.85569,-33.02376 0.8639,1.43999 12.19191,36.19174 9.79193,37.72773 -2.40008,1.53599 -12.67191,4.12797 -21.98394,-15.26389 -9.31193,-19.39186 -27.7438,-33.59976 -24.28782,-53.66361 3.45597,-20.06396 -2.68798,-49.24775 -2.68798,-49.24775 z"
       id="path677" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#aa0000;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil4"
       d="m 226.90927,681.88623 c 2.87998,20.63985 -50.87963,67.29552 -136.895006,89.27936 C 18.302774,628.41461 154.62179,301.72887 154.62179,301.72887 l 147.74294,312.57385 c -31.19978,42.04769 -76.99145,57.02359 -75.55146,67.48751 z"
       id="path679" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#aa0000;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil4"
       d="m 350.65238,543.45513 c -15.74389,26.11181 -32.73576,50.01573 -48.19165,70.94358 -0.48,0.6719 -0.95999,1.34399 -1.43999,2.01589 -20.25586,-7.77584 -40.41571,-23.42383 -50.49564,-37.72772 -23.32783,-32.83177 -25.15182,-230.39835 -25.15182,-230.39835 0,0 95.23132,117.69516 125.3751,195.2626 z"
       id="path681" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#aa0000;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil8"
       d="m 642.01029,651.45445 c 0,0 -230.49435,-64.51154 -348.7655,-92.73543 10.36793,-139.583 44.54368,-561.4999739 -170.30277,-392.54118 0,0 -16.22388,452.15685 87.93537,543.74019 0,0 334.26959,7.10395 397.91714,3.16798 0,0 18.71986,-9.69594 23.32783,-16.12799 14.87989,-20.63975 9.88793,-45.50357 9.88793,-45.50357 z"
       id="path683" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#f99746;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil12"
       d="m 445.2117,929.08449 v 88.89531 c 0,18.3359 -14.97589,33.4078 -33.40776,33.4078 h -525.50022 c -18.33586,0 -33.31176,-14.9759 -33.31176,-33.4078 v -88.89531 c 0,-18.3359 14.9759,-33.4078 33.31176,-33.4078 h 525.50022 c 18.33587,0 33.40776,14.9759 33.40776,33.4078 z"
       id="path707" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#ed7d2b;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil11"
       d="m 445.2117,1001.756 v 16.2238 c 0,18.3359 -14.97589,33.4078 -33.40776,33.4078 h -525.50022 c -18.33586,0 -33.31176,-14.9759 -33.31176,-33.4078 v -17.5679 h 582.71581 c 3.26398,0 6.52795,0.48 9.59993,1.3441 z"
       id="path709" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#e8c6a7;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil15"
       d="m -20.576946,1051.3876 -23.71183,89.7594 v 0 l -98.591294,373.4374 h -10.36792 l 57.023588,-309.7899 c 0.096,-0.288 0.096,-0.576 0.191998,-0.96 l 28.223797,-153.2149 47.327661,0.768 z"
       id="path711" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#c69d7b;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil16"
       d="m -20.576946,1051.3876 -23.71183,89.7594 v 0 c -1.34399,0.6719 -44.44768,22.9438 -51.839627,62.6875 l 28.223797,-153.2149 z"
       id="path713" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#e8c6a7;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil15"
       d="m 445.2117,1514.5844 h -10.36792 l -80.35143,-304.2219 v -0.096 l -18.23986,-69.2155 v 0 l -23.71183,-89.7594 47.32766,-0.768 16.12788,87.6474 12.09591,65.5675 c 0.096,0.288 0.096,0.672 0.192,0.96 l 57.02359,309.7899 z"
       id="path715" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#e8c6a7;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil15"
       d="m 284.98885,1168.8908 -0.19199,-0.096 c -0.192,-0.384 -0.192,-0.288 0.19199,0.096 z"
       id="path717" />
    <path
       inkscape:connector-curvature="0"
       style="clip-rule:evenodd;fill:#c69d7b;fill-rule:evenodd;stroke-width:0.09599931;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision"
       class="fil16"
       d="m 375.9002,1138.171 c -8.73594,12.6719 -20.73585,36.5757 -21.50385,72.0955 l -18.23986,-69.2155 v 0 l -23.71183,-89.7594 47.32766,-0.768 z"
       id="path719" />
  </g>
</svg>
